 --> ******************* F4 BUCHHALTUNG ******************* <--              nach Vorlage zum F6-4th v. 25. Dez 1993                                                                                    (C) Copyright 2004 by h.-peter recktenwald Berlin        experimentelle weichware OHNE GARANTIE fuer Linux und F4 Forth   von h.-peter recktenwald D-12159 berlin-friedenau albestr 21                                                                    verwendung gemaesz "QT-Lizenz 1.0" frei fuer private zwecke,    patentrechtliche verwertung ohne einschraenkung vorbehalten.                                                                                                                                     programmquellen: http://www.lxhp.in-berlin.de/lhpf4.html                     e-mail f4bh at lxhp.in-berlin.de                                                                                        2002 März 27 13:59h          We 2003-08-20 11:46                                   juengste: Mo 2004-01-18 07:06        ( -> ******************* F4 BUCHHALTUNG ******************* <- )                                                                                                                                 --> ******************* F4 BUCHHALTUNG ******************* <--                                                                                                                                  bh nach f4f(ranum), f4m (array), f4p(printer), f4ed(editor)                                                                                                                                    ( -> ******************* F4 BUCHHALTUNG ******************* <- )                                                                                                                                                                                                                                                                                                                                 cr tab ." JOURNAL & BUCHHALTUNG (C) .hpr'93/02,2003/08 " cr    ( -> ******************* F4 BUCHHALTUNG ******************* <- )                                                                forth definitions decimal lc-ignore 1 warning !                 xlload !hlp                                                                                                                     xlload :clists:  xlload? :slist  xlload? >col  xlload? csp@     xlload? f4f      xlload? f4m     xlload? f4p   xlload? f4ed     xlload? bms                                                                                                                     f" f4ans.scr" pad2 place                                        pad2 dup "hlp string ' "t&d' l-load drop                                                                                        hlp!                                                                                                                                                                                    -->                                                                     ( -> ******************* F4 BUCHHALTUNG ******************* <- )                                                                forth definitions                                               if-nfound safe! : safe! last @ fence ! ;                        : >error< [ (abort) @ (quit) @ ] dliteral (quit) ! (abort) ! ;                                                                  if-nfound 2off : 2off 0. rot 2! ;                                                                                                -16 cons+ 16-      \ : 16-                                                                                                     ' 4* palias cell*   ' 4/ palias cell/  \ : cell* : cell/        ' 4+ palias cell+   ' 4- palias cell-  \ : cell+ : cell-                                                                                                                                -->     \ >error<   ( -- )                                              \   zweimal in {val-in}, und in {Buchhaltung}                    --> ******************* F4 BUCHHALTUNG ******************* <--                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  --> ******************* F4 BUCHHALTUNG ******************* <--                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ( -> ******************* F4 BUCHHALTUNG ******************* <- )                                                                ' (number) palias convert       ( : convert - 79-forth word   )                                                                 : csp! 2>r sp@ csp@ - 4/ 2+ ndrop 2r> ;      ( rst dstack     ) : +text scount rot +place ;     ( a1 a2 -- ( stg a1 to buf a2 ) : !name scount rot min rot place ;           ( dst max stg -- )                                                                 : inkey (ti) 8 m>r 20000 u* swap (ti) 2!       ( ticks -- char )  stdin w4f stdin ?input 0dup drop (ti) 8 r>m ;                 : pause inkey drop ;                           ( time -- )                                                                                                                              -->                                                                                                                                                                                                     ( -> ******************* F4 BUCHHALTUNG ******************* <- )                                                                : lc? (bits) @                  ( -- f ( tf nach 'lc-ignore'  )   [ lc-depend (bits) @ lc-ignore (bits) @ xor ] literal and ;                                                                   : wid -compile (wid) ;      immediate   \ fensterbreite         : bot -compile (bot) ;      immediate   \ fensterhoehe                                                                          : at -compile swap -compile at-xy ; immediate    ( row col -- ) : pos -compile xy -compile swap ;   immediate    ( -- row col )                                                                                                                         -->                                                                                                                                                                                                                                                                     ( -> ******************* F4 BUCHHALTUNG ******************* <- )                                                                : (s#)          ( -- n f )                                        "# (" (# pad c@ 0= 1- max-int and 2swap cs#)          ( -- n f )                                      \   ret num. input n & input-flag 0:"" max-int:"-"              ( -> ******************* F4 BUCHHALTUNG ******************* <- )                                                                      #10 load                \ text, voc, cons, print           bh   #30 load                \ bh programm 1                    bh   #50 load                \ bh programm 2                    bh   #90 load                \ bh programm 3                                                                                       s" bh.gls" (file) place                                                 >ed              \ editor-anpassung                             >cashflow        \ lfd. auswertung dem betrage nach             voc>>            \ programm                                                                                          cr tab ." JOURNAL & BUCHHALTUNG (C) .hpr'1993/02,2003/08 " cr                                                                      ;s                                                                                                                          ( Buchhaltung ) forth definitions decimal hlp!                                                                                  ' noop defer Buchhaltung                \ main program word     ' noop defer cy                         \ copyright notice                                                                                                                                                                              \ VORLÄUFIG:            0.  constant (in)   constant (bk)                               (tb) cell+ (up) - ucons tib-max                                 : tib> [ (tb) cell+ @ ] literal tib ! (bk) blk ! ; \ rst. i/o   : >tib blk@ is (bk) tib> tib-max tib +! blk off ;  \ tmp. tib   : in> (in) in ! [ (quit) @ ] literal (quit) ! ;    \ rst i/o ptr: >in in@ is (in) in off ;              \ prepare interpreting                                                                                                                          -->                                                                      ( vari & cons ) forth definitions decimal                                                                                      if-nfound bh vocabulary bh immediate                                      bh definitions forth                                   vocabulary bh-menu immediate                                    vocabulary konten  immediate                                                                                                   ' bh     v2>pfa is konten  ' konten  is bh                      ' konten v2>pfa is bh-menu ' bh-menu is konten                  if-found printing if-found bhm ' printing is bhm                                                                                : voc>>  [_] forth [_] bh definitions [_] bh-menu ;             : kvoc>> voc>> [_] konten definitions ;                                                                                 -->                                                                     \ search order: ...assembler [ bh konten bh-menu bhm ] forth...  ( einstellbare kontennummern ) bh definitions decimal                                                                           1400 constant debit  1600 constant credit     \ sammelkonten    1900 constant k-prv                           \ 1. privatkonto  9999 constant k-num                           \ max# sachkonten10000 constant d-num 20000 constant c-num      \ deb-/creditoren                                                                0     variable num-lk           \ : num-lk kette der kt-nummern 0     variable nam-lk           \ : nam-lk kette der kurznamenvari & cons der buchungszeile ) bh definitions decimal                                                                                  64 c/l max constant lin-l    \ : lin-l zeilenlaenge                                                                                                          \ länge der eintragungen  6 constant dat-l 29 constant txt-l    \ : dat-l : txt-l        11 constant btr-l  5 constant kto-l    \ : btr-l : kto-l                                                                                    dat-l 1+ constant txt-p    \ : txt-p positionen der    txt-p txt-l +  1+ constant btr-p    \ : btr-p journalzeile      btr-p btr-l +  1+ constant s/h-p    \ : s/h-p                           s/h-p  2+ constant u/v-p    \ : u/v-p                            u/v-p 2+ constant kto-p    \ : kto-p                    kto-p kto-l + 1+ constant gkt-p    \ : gkt-p                                                                       -->                                                                      ( vari & cons beim buchen ) bh definitions decimal                                                                               1 constant lin    0 constant pvl     \ lfd.nr, vorgaenger       1 constant eli    0 constant mnu     \ fehlerzeile, menu                                                                        1 constant tag    1 constant mon  2004 constant jar \ bl datum                                                                0. 2constant btr    1 constant s/h     0 constant u/v             0 constant kto 9999 constant gkt     0 constant (a/p)           1   constant a/p  1 constant k/g     \ k.blatt aktiv/p kto/g                                                                                                                          -->                                                                                                                                     \ : tag : mon : jar : btr : s/h : u/v : kto : gkt : (a/p)       \ : a/p : k/g : lin : pvl : eli : mnu                            ( vari & cons zu den konten )        bh definitions                                                                              "SV constant vst-m            \ : vst-m vst ust.kt-msk          "WM constant mws-m            \ : mws-m mwst ust.kt-msk          20 constant nam-l            \ : nam-l max.len kt-name       $5f5f5f5f dup 2constant n-msk   \ : n-msk                                                                                         1   constant (s/h)            \ : (s/h) flag 1:+/-  0:s/h     241   constant +/-              \ : +/- ascii für +/-           "9 1+ constant "9+              \ : "9+ zifferngrenze           "#    constant joker "# ,       \ : joker kontenauswahl, vorgabe-1    constant (joker)          \ : (joker) text platzhalter                                                                    cyan  constant mcl              \ : mcl menu-hintergrundfarbe   forth definitions 1 =: syn      \ : syn synchronauswertung                                                              -->      ( vari & cons, ein-/ausgabepuffer,-zeilen ) bh definitions                                                                         0 variable txt txt-l vallot     \ : txt                       s" buchungstext" txt-l min txt place                                                                                          lin-l variable n-lin lin-l vallot   \ : n-lin neue buchungszeilelin-l variable o-lin lin-l vallot   \ : o-lin vorige            lin-l variable t-lin lin-l vallot   \ : t-lin arbeitszeile,saldivari & cons file-namen ) bh definitions                                                                                      s" kt.scr" path-max stg (screen)                                s" bh.gls" path-max stg (file)                                                                                                  s" cc00.jur" 1K stg jur         \ : jur journal                 s" kt.scr"   1K stg ktn         \ : ktn konten                  s" cc00.jbk" 1K stg jbk         \ : jbk journalsicherungsdatei  s" cc00.sfi" 1K stg sfi         \ : sfi sortiertes journal      if-nfound drk s" /dev/par0" 1K stg drk \ drucker oder printfile if-nfound msg s" msg.scr"   1K stg msg \ programm-meldungen     s" msg.scr" to-stg msg          \ : msh und : msm bh-texte                                                                                                                              -->     \ : drk : msg : sfi : jbk : ktn : jur : (screen) : (file)                                                                        ( bh-fenster  ) bh definitions                                                                                                 -6 >bot m>                          \ : m> menu, obere zeile    "'rph ,                             \ marke                     : 4>col wid 4/ >col ;               \ curpos 1/4 bildbreite                                                                                                                             -->                                                                                                                                                                                                                                                                     : .msg printing p'dis ?msg ;        ( nn -- ( nur display )     \ .msg etc grenzenermittlung einbauen, altes muster mit länge 0 \ => bhm.scr                                                                                                                                                            safe!                                                                                   5    constant 5                 \ : 5 oft  gebraucht & case:                                                                    : w= over joker sj= ;                                                                                                           : 1scr          ( ch -- )       \ min. eine leere seite           -dup 0= -exit >r c/scr dup r flen 1- 0< 0=                      if r flen >rr swap /mod - c/scr dup r> + r fposab drop endif    + here swap 2dup blanks r> printing sstrg ;                                                                                                                               -->                                                                                                                                                                                                                                                                                                                                                  ( arbeitsspeicher ) bh definitions decimal              ( 20           forget k-cell if-found k-cell ;s                                                                                        8    constant (kc)              \ : (kc)   kto-eintragung bytes 2    constant (sc)              \ : (sc)   sortier-eintragung   (kc) constant k-cell            \ : k-cell kto-eintragung bytes                                                                 c-num k-num + 1+ k-cell * constant k-len \ speicherbedarfpositionen in {konto}-definition bezueglich vmem basisadresse                                                                 8 cell*         constant v>lk#  \ : v>lk#  vfa -> num-lk        v>lk# cell-     constant v>kto  \ : v>kto  kontonummer          v>kto cell-     cons+    v>a/p  \ : v>a/p  8bit aktiv/passiv     1 v>a/p        cons+    v>bch  \ : v>bch  8bit kto benutzt     -2 v>a/p        cons+    v>ust  \ : v>ust  16bit ggf steuersatz 3 cell* v>lk# + cons+    n<link \ : n<link $-link-posn -> vfa     v>lk# minus   cons+    #<link \ : #<link #-link-posn -> vfa   2 cell* n<link  constant k-siz  \ : k-siz  kto-defn datenfeld         0 n<link minus to n<link                                                                                          -->     \                                    ->8*4                      \                                   num-lk         nam-lk       \ dsoll | dhaben | USt | a/p | 0.kt| #ptr | d.chr | "ptr | » | »\  0       8        0c   0e     0f    10    14      1c     20    ( vari innerhalb kontendefn )       bh definitions                                                                             : k>disp <builds , does>@ swap >body + ;                                                                                         0  v>a/p k>disp k>a/p          \ : k>a/p ( pfa -- n ) USt-code -2  v>a/p k>disp k>ust          \ : k>a/p ( pfa -- n ) kontenart 0  v>bch k>disp k>bch          \ : k>bch ( pfa -- flg ) benutzt                                                                                                                -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ( fehler-/meldungen )      bh definitions decimal                                                                               -1   constant mem-lk            \ : mem-lk adresse/kanal-id/-1  k-len heapmem bhmem             \ : bhmem saldierspeicher                                                                          10    constant s-scl         \ : s-scl ganzzahlen-scalierung    100   constant j-scl         \ : j-scl text-scalierung       df 1000 fconstant f-scl         \ : f-scl f.p.-scalierung                                                                       : b-ovf                         \ fp - fp f ) tf überlauf         fdup fabs [ max-int s->f ] fliteral ffehler )     forth definitions decimal                       : -error                                                          swap 0= if drop exit endif message 200 pause abort ;                          bh definitions                                  : bhw black bg white fg 0. csr cls ;    ( farben & leeres fenste: clrt curd cls>eol ;                   ( für bh & ende         : nul-m bel b> clrt b> ;                ( untere zeile, loeschen: nm nul-m .msg ;                       ( n -- ( msg in untere z: mlin -compile nm ;        immediate   ( n -- ( menu-zeile     : erlin 1 mlin eli . ;                  ( nn --                 : ?konto -exit ." Konto ?" 1. -error ;  ( x|0 -- |abort-1                                                                                                                               -->                                                                     \ : bhw                               \ fenster einrichten      \   black bg white fg 0. csr cls cure ;                         ( diverse )     bh definitions decimal    ( 31                   \ jede zeile, die nicht mit einer ziffer beginnt, ist kommentar: -cmt dup c@ "0 "9+ within? ;      ( ptr -- ptr f (ff kommentar: c-key -compile nopky ;    immediate            \ tastatur leer: qc voc>> forth ' buchhaltung cfa hidden (quit) ! ;                                                                            \ :HIER: eingabe wird mit {evaluate} wesentlich vereinfacht:    \ für programmeingabe position & daten sichern & restaurieren   : in>> (in) in ! tib> ;                          \ rst i/o-ptr  : quit>> [ (quit) @ ] literal (quit) ! voc>> ;   \ rst {quit}   : ende a-close quit>>                            \ ? nochmal      tib> bhw qc space 15 message -1. -error ;                                                                      -->                                                                            \ : k>ust 1 > ?konto k>ust ;        ( pfa -- ustptr |abort                                                                      ( datentypen )                   bh definitions decimal ( 32                                                                    : btr>f btr d->f f-scl f/ ;         \ betrag als fp-zahl        : f>btr f-scl f* f->d is btr ;      \ fp-zahl als betrag                                                                        : fpval?                            \ ( -- f ) tf: kam ranum      depth [ 1 floats 4/ 1- ] literal > fpvoc? dpl@ -2 = or and ;                                                                                                                          -->                                                                                                                                     : v-dup fpval?        ( -- ( dup vocabular-/zahlenartabhängig)    IF fdup exit ENDIF dpl@ 2+ case: fdup dup 2dup ; ;            : v-cons fpval? IF fconstant exit ENDIF         ( voc. cons       dpl@ 0< IF constant exit ENDIF 2constant ;                                                                                    \ zahl aus direkter eingabe in den geforderten typen umwandeln:                                                                 : fp-val fpval?                              ( zahl -- f.p. )     IF 4 ?depth exit ENDIF dpl@ 0< IF 1 ?depth s->f exit ENDIF      2 ?depth d->f df 10 dpl@ s->f f^ f/ ;                                                                                         : dn-val fpval?                              ( zahl -- double )   if f->d exit endif dpl@ 0< 0= -exit s->d ;                                                                                                                                            -->                                                                                                                                                                                                     : sn-val fpval?                              ( zahl -- single )   if f->d else dpl@ 0< if 0 endif endif -18 -error ;                                                                             ( sortierte verkettung ) bh definitions decimal ( 35                                                                           \ d.soll | d.haben | us | ap | 0.kt| ptr | d.chr | ptr | » | »  : -konto num-lk                 ( kto.nr -- kpfa | ff kein kto.   begin @ dup while >v 2dup cell- @ = until                       dup if v>lk# - endif sdrop ;                                                                                                  \ sortierte linkadressen vari auf top.link, ältestes linkfeld 0 \ anordnung im speicher: [d.vergleichsdaten][bot.linkptr]       : -link dup@         ( d.daten lkvari - top.lk bot.lk )           enter begin >v dup@ drop2                                       entry ?0= over                                                   if drop >rr 2over r> 8- >v 2@ du< endif                        until 2sdrop ;                                                                                                        -->                                                                      ( konto-definition ) hidden definitions           ( 35                                                                         : n>msk     ( -- dn )                                             [ 2 cell* dup ] literal |loc                                    latest count #31 and width @ min l0 swap cmove                  l0 8 >us drop 2@ [ minus ] literal |loc ;                                                                                     : !lk -link 2 pick ! ! ;            ( va d.data lkvari -- )                                                                                                                             -->                                                                                                                                     \ !lk       ( va d.data lkvari -- )                             \   sto vemem disp bottom-link to vmem vari, vmem disp to toplk \ n>msk     ( -- dn )                                           \   fetch up to 8 leading chars of own name, upper letter case   ( konto-definition ) bh definitions               ( 36->130 )                                                                  : KONTO <builds vp ,                                              vp k-siz vallot >v dup k-siz erase    ( n-kto -- n vfa )        (a/p) over v>a/p c! 0 over v>kto + num-lk !lk                   dup v>lk# + dup n>msk rot cell+ 2! nam-lk !lk                   does>v dpl@ 3+ -exit v>kto + cell+ @ -1 dpl ! ;                                                                                           : db-konto ' -konto [ here ] literal (gb) 2! 4 tdb ;                                                        -->                                                                     \ dsoll | dhaben | USt | a/p| 0| kt| #ptr | d.chr | "ptr | » | »\ 0     |8       |16   |17  |18|22 |26    |30     |38    |42 |46                                                                                                                                                                                                ( ust zwischenspeicherung )                              ( 37                                                                                \ {ust}-saldentabelle, {u%} steuersätze (10 posten): 2array 02 [ 1 cell* ] literal array latest pfa+ (dim) ;                                                                       : -kname n-msk 2and nam-lk      \ kto.chrs - pfa | ff kein kto.   BEGIN @ dup WHILE fdup 2 cell* - 2@ d= UNTIL                    dup IF n<link - ENDIF -rot 2drop ;                                                                                            : U>KONTO $0e30 or >rr          \ nn - pfa|0 (kto aus codeziffer  vst-m -kname -dup 0= IF r mws-m -kname ENDIF rdrop ;                                                                  -->                                                                                                                                     \ 2array    ( ccc, n1 n2 -- )                                   \   array von n1 posten zu n2 zellen mit namen ccc einrichten    ( kt-plan, summen-&saldenbilanz )                       ( 38   ' noop defer (ll) \ index --            ( aktion in liste       ' noop defer (pl) \ disp kfa -- disp kfa( vorspann für (ls)     ' noop defer (ls) \ disp kfa --         ( kontenaktion in -list                                                                 : -liste            ( num lkdisp linkptr -- (liste schreiben )    printing dis -cr rot >r                                         ENTER BEGIN 2dup swap - [ v>kto cell+ ] literal +                @ r r [ k-num 1+ ] literal + within?                            IF bot? drop 2dup swap - (pl) (ls) dis -cr ENDIF               ENTRY @ ?0= ?esc or UNTIL r> fdrop ;                                                                                          : #konten v>lk# num-lk -liste ;        ( nach nummern geordnet  : $konten n<link nam-lk -liste ;        ( nach namen geordnet                                                           -->                                                                      (                                                       ( 39                                                                   : liste 1 is (s/h) [ c-num 1+ ] literal ( sach- & personenkonten  0 DO i (ll) [ k-num 1+ ] literal +LOOP ;          -->                                                                          0   constant jk    \ : jk flg für kto-gruppen                   0   constant j5    \ : j5 ausgabespalte bei kto-gruppen         0   constant jg    \ : jg flg für gkt-gruppen                   0   constant jm    \ : jm falls masken =/=                      0   constant uk    \ : uk  u-kontenblatt & kto-eingabe          0   constant ug    \ : ug u-kto bei gkt-eingabe                                                                                "#   =: joker       \ : joker maske für kontengruppen                                                                                                                                   -->                                                                      ( kontentyp, a/p flags, ust )                                                                  ( einzelnes konto markieren:    : >a/p swap k>a/p c! ; ( pfa nn -- (a/p flag besetzen)          : >passiv -1 >a/p ;             ( pfa -- )                      : >aktiv 1 >a/p ;               ( pfa -- )                      : >c/flow 0 >a/p ;              ( pfa -- (cash-flow-auswertung)                                                                                                 ( alle neuen entspr, markieren: : aktivkonten 1 is (a/p) ;                                      : passivkonten -1 is (a/p) ;                                    : cashflow 0 is (a/p) ;                                                                                                                                                                 -->                                                                                                                                                                                                      ( konteneingabe name => nummer ) decimal                 ( 41                                                                  : >cashflow dis pse 0 is pse 0 is dis cashflow ( alles c/f-typ    ' >c/flow is (ls) ' #konten is (ll) liste is pse is dis ;                                                                     : >u%                           ( pfa fn|dn|nn -- ( u-steuersatz  fp-val df 100 f* f->s swap k>ust ! ;                                                                                          joker dup >< or dup 2dup 2dup 2variable k-msk v, v,                    2dup 2dup 2variable g-msk v, v,         ( masken zum            2dup      2variable m-msk v, v,         ( kontenvergleich                                                                                                                        -->                                                                                                                                                                                                                                                                     : j-flg (joker) >r -1 to (joker)        ( msk -- flg tab joker    5 joker >< >r rp@ 1 joker matchj rdrop drop                     0> dup 5 * r> to (joker) ;                                                                                                    : m>m bl over 5 + c! 5 cmove ;          ( ptr1 ptr2 --          : m>kg dup k-msk m>m g-msk m>m ;        ( ptr -- ( msk besetzenkonto test ' test @            ( tmp. zum vergleich in mnamforget test nam-lk off num-lk off             .s .s             : ?kfa @ [ dup ] literal = ;  drop  ( kfa - f  ( ? konto-defn )                                                                 : -mnam (bits) @ >r lc-ignore       ( ptr -- pfa | 0              count 31 and 2>r nam-lk                                         BEGIN @ dup WHILE dup n<link - nfa count 31 and                  r min 2r joker sj= 0=                                          UNTIL rdrop rdrop r> (bits) ! ?0= -exit n<link - ;                                                                                                                                    -->                                                                     \ -mnam ( ptr auf count.b -- n )                                \   statt -kname in mnam/kmsk                                                                                                    ( konteneingabe name => nummer ==> mit {evaluate} aufbauen ! )                                                                  ( namen-/kurznamen-/ust-code prüfen   ( ptr disp len -- p d l) : mnam -rot + 1- 2dup 1- ! dup@ $0100 >    \ nicht <nul>          IF dup@ >|< 1- over "0 "9+ within? 0= or \ eine ziffer           IF drop 0 ELSE u>konto -dup ENDIF -dup   \ ust-code             0= IF dup 1- sfind dup                   \ kontenname            IF 2drop dup ?kfa IF -1. ELSE 0= ENDIF ENDIF       \ oder      0= IF dup -mnam -dup ENDIF ENDIF         \ kurzname oder        IF dup ?kfa                              \ bei namen o. code     IF 1 is uk rot drop over swap           \ konto gefunden         v>kto + 2@ <# # # # # # #> swap       \ nummer ermitteln        1- 2dup c! -rot >rr 1+ cmove r> swap   \ als eingabe         ELSE drop ENDIF ENDIF ENDIF 1+ 0 rot ;    \ zur nrn-auswertung  joker dup >< or m-msk !                                                                                               -->      ( konteneingabe nach nummer/name/maske                         : kmsk bl enclose drop over- mnam              ( ptr1 -- ptr2     dup m-msk 5 rot - 0max                                          -dup IF 2dup "0 fill + ENDIF                 ( "0" bis len=5    2swap + rot 5 min dup 2 <                    ( <nl> ausfiltern  IF over @                                    ( dann vorgabe      0= IF "0 m-msk dup 1+ 4 joker fill c! 0 ENDIF \ "0" & 4*joker  ENDIF -dup 0>                                                    IF dup 5 = IF "3 ELSE "9+ ENDIF >r 0        \ 1. aus 5 <3       DO count dup "0 j within? 0= "9+ rp@ 4+ !   \ danach max "9"     IF bl or associative: "0 "1 "2 "k "l #32 ;                                      case: "0 "1 "2 "1 "2 "0 #0 ;                     ?0= IF is uk joker ENDIF                 \ nicht ziffer        ENDIF rot sover c! 1+ swap                 \ maske bilden     LOOP r> ENDIF fdrop m-msk bl over 5 + c! ;                                                                            -->      ( konteneingabe kto & gkt                                                                                                      : #imsk pad 6 blanks                           ( nn   -- ptr      dn-val <# # # # # # #> pad swap cmove pad kmsk ;              : imsk pad kto-l over ! 2+ m>m pad width @     ( ptr1 -- ptr2     c-key edline drop dup 1- dup@ >r >r kmsk k> clrt 2r> ! ;                                                                      : #kmsk #imsk m>kg ;                ( nn -- ptr( msk vom stack  : ikm -1 dpl ! 0 is uk k-msk imsk ; (    -- ptr( msk eingeben                                                                   : (qfb) 1 txt-l 1+ within? dup IF drop fpad ENDIF ; ( -- f      : fbuf? fpad 1- @ (qfb) ;           ( -- tf ( bei textmaskierung: itxt 8 mlin fbuf? dup IF 53 .msg ENDIF ": emit                  0= IF fpad 1- off ENDIF fpad 1- txt-l c-key edline 2drop ;                                                            -->                                                                      ( konteneingabe kto & gkt                                                                                                      : msk-m nm 4 3 .msg joker emit .msg ;                                                                                           : .fbuf fbuf? -dup                   ( ggf. suchtext              IF 8 .msg "" emit print "" emit ENDIF ;                       h] 7 .msg 5 type "] emit space h;  dup ( ptr - (display         : .msk 9 .msg k-msk h, 10 .msg g-msk h, .fbuf ; ( msk & text                                                                    : imk g-msk here m>m 29 msk-m   ( masken & text                   p> clrt ikm m>kg here g-msk m>m 11 msk-m uk 0 is uk             p> clrt g-msk imsk g-msk m>m .msk uk or is uk itxt ;                                                                          : i-msk p'dis imk [ cmc0 ] ;   ( eingabe nicht mitdrucken                                                               -->     \  : msk-m nm 3 .msg joker emit 4 .msg ;                         ( kt-plan, summen-&saldenbilanzkt-plan, summen-&saldenbilanzdiverse ergänzend zur auswertung )           bh definitions                                forget klasse if-found klasse ;s   0  constant klasse                     \ zur auswertung         0  constant p>c  0 constant p>d        \ -- pfa ( sammelkonten                                                                 : j-lines dr0 dr? bchan flen lin-l m/ sdrop ;  \ max. zeilen(89 : jline lin-l b/buf */mod dr0 block + ;        \ zeilenadresse  : lin>r# b/scr /mod scr ! c/l * r# ! ;  ( lin - (zum editieren  : >sc dr0 xdr scr-size lin lin>r# ;                                     \ buchungszeitraum fuer kontenblaetter, s-bilanz, etc   : mon$ dup 1 13 within? if $52 msg@ -dup 0= if rot 0= endif       ?0= -exit drop swap 3* 3- + 3 exit endif drop 51 msg@ ;       : .mon$ mon mon$ type "' emit jar 0 <# # # #> type space ;                                                              -->     \ : >sc dr0 (loc) sc @ sm ! lin lin>r# ;                        \ (loc) max scr/file nach sc und sf, sm gerede angezeigtes file  ( diverse zur auswertung )               bh definitions        : 'ndis r+                              \ verdeckte operationen   dis pse 2>r 0. is dis is pse execute 2r> is pse is dis ;                                                                      : spcs curd spaces ;                                            : ospc out @ - spcs ;                                           : ?kb dup ?0= -EXIT k>bch c@ ; \ pfa -- pfa f ( kto benutzt     : t-tog fpad 1- dup@ >< swap ! ;                                : .kms count "1 "9+ within? >rr - 5 r> + type ;                                                                                 : mon> not > ;           ( zeitraum  -:ab +:= >12:von.lo-bis.hi : >mon< dup 12 > if >|< 1+ within? exit endif d0= ;             : mon= 2+ @ $0f0f and >|< 10 * + >rr mon = -dup   ( ptr - flg     0= if r mon dup sgn 1+ case: mon> sdrop >mon< ; endif rdrop ;  -->  \ auswertungsperiode: mon = anfangsmonat + endmonat * 256                                                                  ( cons & vari zur bilanz (                              ( 42                                                                   : strich wid swap emitm cr ;                                    : [t] space id. space .mon$ cr "- strich ;                      : .t cr [t] ;                                                   : [titel] latest [compile] literal compile .t ; immediate                                                                       0. 2variable s-sum                       ( klassensumme         0. 2variable s-g&v                       ( g&v-kto vorläufig    0. 2variable s-roh                       ( rohgewinn            0. 2variable s-erg                       ( betriebsergebnis     case: c-g&v #0 #0 #0 #1 #1 #0 #0 #0 #1 #0 ; ( klassen 3 4 8     case: c-roh #0 #0 #0 #1 #0 #0 #0 #0 #1 #0 ; ( klassen 3 8       case: c-erg #0 #0 #1 #1 #1 #0 #0 #1 #1 #0 ; ( klassen 2 3 4 7 8                                                      -->                                                                         ( fetch & print values                                  ( 43                                                                   : betrag dup -rot dabs 0. s-scl 0    ( dn -- dn.rund )            uqd/mod 2swap drop 4 > m+ rot d+- ;                                                                                           : betrag# betrag rot d+- dup         ( s/h dn -- dn$              -rot dabs <# sign # # ", hold #s #> sdrop btr-l                 2dup < IF swap DO bl hold LOOP ELSE 2drop ENDIF 0. #> ;                                                                       : #upz abs 0 <# # "% hold # ", hold #s #> 1- ; ( nn -- ptr cnt(%: upz# k>ust @ ?0= -EXIT #upz ; ( pfa -- ptr c | f (ust%.$                                                                      : -a/p 2+ dup 2- k>a/p                                            c@ c->s ?0= or 2* (s/h) 0= -exit abs ;                                                                                -->                                                                      ( acc. data )                                           ( 44                                                                   : @soll -a/p - 2@ ;     : @haben -a/p + 2@ ;       ( pfa -- dn ): @saldo dup @soll rot @haben d- 2dup s-sum 2+! ;  ( pfa - dn                                                                   : .betrag betrag# type ;              ( ap dn -(betrag schreiben: .cbetrag 1 -rot .betrag space ;     ( dn --( cashflow-betrag                                                                  : .saldo s/h swap @saldo .betrag ;    ( pfa - (sld)             : .haben s/h swap @haben .betrag ;    ( pfa --( haben schreiben : .soll s/h swap @soll .betrag ;      ( pfa --( soll schreiben                                                                                                                          -->                                                                                                                                                                                                      ( kt-plan, summen-&saldenbilanz                         ( 45                                                                   : (kto)                               ( dn -- ptr len (kto$       over 10000 / case: #32 "K "L ; >r <# # # # # r> hold #> ;     : kto# v>kto + 2@ (kto) ;            ( pfa -- ptr len (kto$                                                                     : .kto# kto# type space ;       ( pfa -- ( print konto-nr.                                                                      : .kto$ out @ nam-l +           ( pfa -- ( print kt-name/u-satz   sdup cfa nfa width @ >rr [ nam-l dat-l - 1- ] literal           >rr min over c@ $1f and min r> over- >r                         width ! id. r> spcs r> width ! upz# -dup                        IF dat-l over- spcs type ENDIF ospc ;                                                                                                                                                 -->                                                                      (                                                       ( 56                                                                   : .ktn dup .kto# .kto$ ;        ( pfa -- ( print kto.nr. & name                                                                 : .KONTO -dup                   ( pfa -- ( alle konto-angaben     0= -exit dup 2dup .ktn .soll .haben .saldo ;                                                                                  : kt-clr 0 over k>bch c! k-cell erase ; ( pfa -- (kto lschen                                                                   : 'addk klasse 1abs dup 9 > if drop 1 endif                       r+ execute 0= if drop exit endif >r 2dup r> 2+! ;                                                                                                                                     -->                                                                                                                                                                                                      ( kt-plan, summen-&saldenbilanz                         ( 57                                                                   : .kpn out @ width @ [ kto-l 4+ ]       ( nummer, name, a/p       literal + + over dup .kto# ( 2-) nfa id. ospc                   10 over upz# -dup IF >r swap 4- r - spcs r> type 4 ENDIF        spcs k>a/p c@ 1+ case: "P #217 "A ; emit ;                                                                                    : .ksum btr-l spcs klasse 1abs dup 10 / dup                       case: 12 71 72 #0 ; .msg 0= if dup . endif space                btr-l 2* 4- swap 9 > - ". emitm 3 spcs                          (a/p) s-sum 2@ fdup .betrag rot d+-                             s-g&v 'addk c-g&v                                               s-roh 'addk c-roh                                               s-erg 'addk c-erg 2drop ;                                                                                             -->                                                                      ( kt-plan, summen-&saldenbilanz                         ( 58                                                                   : .sskto -dup           ( klasse kfa -( benutztes kto schreiben   IF klasse 0< >r                                                  dup [ v>kto 2+ ] literal + @ 1000 /                             dup 9 > IF 10 / 10 * ENDIF    ( debitoren & creditoren          dup klasse 1abs -                                               IF dup r                                                         IF .ksum cr not s-sum 2off ENDIF is klasse cr                  ENDIF drop  r IF                                                 ?kb dup is dis IF dup .konto ENDIF r                            IF dup v>lk# + @                                                0= IF cr r is dis .ksum s-sum 2off ENDIF ENDIF                 ELSE 1 is dis .kpn 1 ENDIF                                     rdrop drop ENDIF ;                                    -->                                                                      ( kt-plan, saldenliste, löschen                         ( 59                                                                   \      ( klasse (pl) (ls) (ll) dis -- listenausgabe --          : lis-go dis ' (ll) @ 2>r ' (ls) @ ' (pl) @ 2>r                   is dis is (ll) is (ls) is (pl) is klasse                        liste 2r> ' (pl) ! ' (ls) ! 2r> ' (ll) ! is dis ;                                                                             : kt-neu 1 is lin pse 0 is pse                 ( summen lschen   0 ' noop ' kt-clr ' #konten 0 lis-go is pse ;                                                                                 : 'rgbn cr btr-l spcs                        ( msg ptr --         out @ [ btr-l 3* 1+ ] literal +                                 rot .msg 2 spcs ". emit "( emit                                 r+ >r 10 #0 DO i j execute IF i . ENDIF LOOP rdrop              bs ") emit out @ - ". emitm 3 spcs 2@ .cbetrag ;                                                                      -->      ( ss-bilanz kt-plan )  bh-menu definitions              ( 60                                                                   : Saldenliste bh s-g&v 2off s-roh 2off s-erg 2off s-sum 2off      [titel] -1 ' noop ' .sskto ' #konten 1 lis-go                   13 s-g&v 'rgbn c-g&v                                            14 s-roh 'rgbn c-roh 15 s-erg 'rgbn c-erg [ cmc0 ] ;                                                                          : Kontenplan bh [titel]                                           0 ' noop ' .sskto ' #konten 1 lis-go ; ( konten nummernweise  : Kontenliste bh [titel]                                          0 ' noop ' .kpn ' $konten 1 lis-go ;   ( nach namen sortiert                                                                                                                          -->                                                                                                                                                                                                     ( .k>name ) forth definitions                                                                                                   : .K>NAME bh dup 0 (kto) type space      ( nr. -- (konto suchen   -konto -dup if .konto exit endif 16 .msgremove workmem. )                hidden definitions                                                                          : mem-mclr  ( disp --)                                            dup bhmem hp>hed @ hp>hed rot 1- < -3 -error ( .. -- disp a )   dup hp>hed @ hp>hed - rot /string erase ;                                                                                                                         bh definitions              : mem-off bhmem heap-rmv -1 to mem-lk ;                         : mem-clear 2 ?depth mem-mclr ;                                                                                 -->                                                                                                                                             \ mem-off   ( -- )                              bh              \   arbeitsspeicher auflösen                                    \ mem-clear ( disp -- )                         bh              \   virtuellen datenspeicher ab disp+basisadresse loeschen       ( remove workmem. )                bh definitions                                                                                                                                              : MEM-CLR 0 mem-clear ;                 \ arbeitsdaten löschen  : MEM-ON bhmem is mem-lk ;              \ arbeitsspeicherclear file / virtual memorynew/clear virtual memoryinterpreteraufruf: fehlendes konto nachtragen )       ( 67   : x-konto                                 \ ( kt.nummer - pfa )   dup -konto dup if sdrop exit endif      \ gefunden oder:        cr 4>col 2 .msg 2dup d. 1 .msg eli .    \ fehler anzeigen       >in >tib tib@ tib-max erase             \ tib umsetzen+leer     <# bl hold # # # # # # bl hold #>       \ 6stellige nummer      swap 2- sover !                         \ als w-string          tib@ over +text                         \ nummer übergeben      tib@ 2dup "  konto  " + text             \ definitionswort      "| swap 2+ c! swap 2dup +text +text     \ name für def.         @order 2>r kvoc>> 2 tib                 \ passendes vokabular   dup@ scount + off +! interpret         \ aufruf                 voc>> 2r> !order in>> ;                 \ vokabulare zurück                                             \ und tib mit in                                                     -->                                                                              ( ust zwischenspeicherung                                ( 68                                                                   10 k-cell 2array ust   ( : ust s&h netto & brutto lfd. buchungen10 1 2array u%         ( : u%  steuersätze zu den codes 0 bis 9                                                                  0. 2variable kbl-s    ( : kbl-s summen im..                     0. 2variable kbl-h    ( : kbl-h   ..kontenblatt                 0. 2variable kbl-n    ( : kbl-n netto und                       0. 2variable kbl-b    ( : kbl-b brutto bei mwst                                                                                ' noop defer  vl       ( : vl auswertung für                     0. 2constant ve       ( : ve programmierende eingabe           kto constant (kt)      ( : (kt) ( vorgabe für kontierung                                                                -->                                                                                                                                     ( ust ausgabe                                            ( 69                                                                   : c-ust 0 ust 2- @ 2* 10.                ( buchung vorbereiten    DO i u>konto -dup                                                IF dup dup k-cell erase k>bch 0 swap c!                         k>ust @ i u% ! i ust over erase ENDIF                          LOOP drop ;                                                                                                                   : b-ust 10.                              ( steuern übertragen     DO i ust 4@ 4dup or or or i u>konto dup rot and                  0= IF 5 ndrop ELSE >rr 4! r> k>bch 1 swap c! ENDIF             LOOP ;                                                                                                                -->                                                                                                                                                                                                      ( ust, konten nach kurznamen                            ( 70                                                                    ( holt die basis einer kontendefinition : NAME>KTO {kurzname} ) ( für eingabe der ersten 4 zeichen statt namentlichen aufrufs )                                                                : NAME>KTO ?exec                        ( -- pfa | abort          [compile] name scount over + bl swap c!                         m-msk 6 blanks kmsk dup 1- 0. rot convert                       sdrop rot = swap -konto sover 0= or dup -error ;                                                                                                                                      -->                                                                                                                                                                                                                                                                                                                                      ( zeilenweise (                                         ( 71                    ( vorgängerzeile holen / neue zeile eintragen ): f-lin pvl jline [ o-lin 2+ ] literal lin-l cmove ;            : s-lin [ n-lin 2+ ] literal lin jline lin-l cmove update ;                                                                     : blin pvl is lin pvl 1- 0< -exit       \ neuen vorgänger suchen  0 pvl 1- DO i is pvl i jline -cmt sdrop -leave -1 +LOOP ;                                                                     : clin lin-l over ! 2+ lin-l blanks ;   \ adr) mem-zeile löschen: cblk jline lin-l blanks update ;      \ nr.) jur-zeile löschenn-lin clin o-lin clin                   \ arbeitszeilen leer                                                                    : +lnr + wid -5 + < 5 * ;                                       : +pos over +lnr + >col ;         ( pos min.rest -- (zur eingabe                                                        -->                                                                      ( zeilenweise (                                         ( 72   : kd count emit count emit ". emit ;    \ datum zusammensetzen  : .kd kd kd kd bs space ;               \ datum schreiben       : .lin >r lin-l wid btr-l 0 +lnr -dup          ( ptr nr --        IF r 4 .r space - ENDIF rdrop                  ( journalzeile   2dup - 0< >r min type r> IF space ENDIF clrt ; ( & nr drucken : .o-lin [ o-lin 2+ ] literal pvl .lin ;         \ vorige zeile : .n-lin [ n-lin 2+ ] literal lin .lin ;         \ lfd. zeile   : ?olin o-lin 2+ -cmt -dup sdrop ;         ( -- ff | ptr tf (alt                                                                : 'mlin o> <rev> .o-lin <rev>       ( alte & neue & menu-zeile    clrt k> .n-lin r+ execute p> clrt p> ;                                                                                        : #mlin 'mlin nm [ cmc0 ] ;                                     : tm nm pvl #. ;                                        -->                                                                      ( datum schreiben                                       ( 73                                                                   h] >r rot dup@ 2swap                   \ pad+ vari min max --     wraps dup rot ! 0 <# r IF r hold ENDIF # # #> \ zahl nach pad+  rdrop pad dup@ -rot 2dup +! rot + 2+ swap cmove h;  dup dup   : dat# >r pad off                       \ datum zusammenstellen   ' tag 1 31 r h, ' mon 1 12 r h,                                 ' jar 0 99 r> h, pad scount ;                                 : .dat ". dat# type ;                   \ datum anzeigen                                                                        h] dr0 @order editor flush !order r+ execute -1. -error h; dup  : ded p-off dr0 bh pvl lin>r# h, ed ;   \ editieren             : dqt -1 is mon h, qc ;                 \ buchen beenden                                                                -->     : drf cls @order editor l !order 17 #mlin ; \ bild erneuern                                                                      ( datum eingeben/lesen                                  ( 74                                                                   associative: >da -27  27  "H   "h  "Z  "z ;         \ : >da     editor case: >dc ded dqt help help noop noop noop ; \ : >dc                                                                     : >DATUM 17 #mlin "t&d type p>         \ datum eingeben: Cursor   11 spcs BEGIN p> .dat c-key key dup >da >dc                      associative: #10 216 208 217 209 218 210 #0 ;                  -dup WHILE dup \ : v   ^  av  a^  cv  c^                                case: #0  #1  #-1  #1 #-1  #1 #-1 #0 ; -dup             IF swap case: #0  tag tag mon mon jar jar #0 ; -dup             IF sover 2+ +! ENDIF ENDIF drop REPEAT ;                                                                                      : o-dat ?olin IF 0. rot 1- convert drop decimal                  #100 m/mod #100 m/mod #100 m/ drop is tag is mon is jar ENDIF ;: i-dat 0 dat# n-lin 2+ swap cmove ;                    -->      ( buchungstext                                          ( 75                                                                   : .txt txt-p txt-l +pos txt print ;                             : otxt txt-l txt !                                                [ o-lin txt-p + 2+ ] literal [ txt 2+ ] literal txt-l cmove ; : ntxt n-lin txt-p over ! txt +text ;                                                                                           : >TEXT 18 'mlin tm txt-p -5 + txt-l +pos 19 .msg pad dup off     txt-l 2dup txt !name over dup scount -trailing sdrop swap !     c-key edline drop 1- w@ dup $0101 <                             swap [ $0100 "K or ] literal = minus or -dup                    IF 0< IF f-lin pvl cblk blin ENDIF otxt exit ENDIF              txt txt-l pad !name ;                                                                                                         : .avoc cr 67 .msg cr vlist ;           \ aktuelles vocabular                                                           -->      ( interpreter zahleneingabe                            ( 76                                                                    : (val) bel csp! tib-max                \ terminal-eingabe        tib@ swap 2dup erase 2- ve at c-key 2- expect in off vl ;     : (fval) decimal voc>> [compile] fp (val) voc>> ;               : vval o> cls>eos 59 .msg clrt [_] fp .avoc 3 mcr ;             : rval p'dis vval (fval) ;                                      : val-in >error< ' rval is error        \ eing. {clc} {>betrag}   ' interpret is vl >tib >in !csp pos is ve (fval) >error<        csp@ sp@ 2+ - 2/ case: btr>f s->f d->f noop ;                   -6 csp +! csp! in>> decimal ;                         -->     \ {val-in} aus clc(123), >BETRAG(77); {vval} aus clc(123);  -/- zahleneingabe, variablendeklaration, -aufruf, rechnen mit (val).vorher muß csp z.b. mit !csp gesetzt werden. zurückgegeben wird aus val-in stets eine f.p.-zahl, hier sind alle forth-eingaben  möglich, auch die deklaration von variablen/constanten           ( buchungsbetrag, programmierung                       ( 77                                                                    : ?b-ovf 0= -EXIT 21 mlin f. btr -1 ' lin +! ;                                                                                  : btr# s/h btr betrag# ;                                        : .btr btr-p btr-l +pos s/h btr .betrag ;                                                                                       : >BETRAG 20 #mlin 60 .msg val-in       \ f.p.-eingabe & rechnen  f-scl f* b-ovf ?b-ovf f->d is btr ;                                                                                           \ ganze zeile übernehmen; zur eingabe beim datum statt <enter>  : ze p> 65 .msg (s#)                                              -dup 0= -EXIT jline o-lin 2+ lin-l cmove ;                      ' ze dup "Z >da is-case >dc   "z >da is-case  >dc   -->                                                                                                                                        ( b.-betrag lesen                                      ( 78                                                                    : ?berr 0= -EXIT erlin csp! df 00 ;                                                                                             : (fbtr) btr-p + pad sover 1+ btr-l cmove       ( vari ptr -- )   dup btr-l + bl sdup c@ >r c! 1+ bl enclose 2drop + 1-           btr-l over c! sp@ 2+ csp !                                      voc>> [compile] fp decimal [number] voc>> ?berr                 r> "- = minus @order fp +- f-scl * !order f->d rot 2! ;                                                                       : o-btr ?olin 0= -EXIT pvl is eli ' btr swap (fbtr) ;           : i-btr n-lin btr-p over !                                        1 btr betrag# btr-l min swap 2- sover ! +text ;       -->                                                                                                                                                                                                      ( s/h )                                                ( 79                                                                    case: $s/h "H "S 217 ;                                          : -s/h bl or associative: "h #0 "s "0 ; 1- ;                    : .s/h s/h-p 1 +pos s/h $s/h emit ;    ( h:-1 s:1 0:2 <bl>,+/-:3                                                                : >S/H 3 (a/p) IF drop 54 #mlin BEGIN p>                          s/h-p 1- 1 +pos ." > " bs c-key key dup emit dup 10 =           IF drop "0 ENDIF -s/h -dup UNTIL ENDIF is s/h ;                                                                               : fs/h s/h-p + c@ -s/h is s/h ;         ( ptr --( set cons s/h  : o-s/h ?olin 0= -EXIT fs/h ;                                   : i-s/h s/h $s/h s/h-p 2+ n-lin 2dup ! + c! ;                                                                           -->                                                                                                                                      ( ust-codierung                                        ( 80                                                                    : .upz u>konto dup IF k>ust @ ENDIF #upz 1- type ;              : [%] dup ." [" . bs "/ emit 5 + . bs "] emit ;                                                                                 : u/v-m nul-m wid lin-l 8+ >                                      IF 22 .msg ENDIF 23 .msg u/v dup .upz 4 >                       case: "V "M ; emit 5 0 DO space i [%] i .upz LOOP ;                                                                           : .ust u/v-p 1 +pos u/v . ;                                                                                                     case:        cde>u  "0 "1 "2 "3 "4 "5 "6 "7 "8 "9 #32 ;         associative: u>cde  "0 "1 "2 "3 "4 "5 "6 "7 "8 "9 #32 #10 ;                                                             -->                                                                                                                                      ( ust-codierung                                        ( 81                                                                    : ocd drop u/v "0 + 1 ;                 ( alter code            : ncd drop 0 ;                          ( ungueltige eingabe                                                                    : >U/V 'mlin u/v-m                      ( ust-codierung eingeben  BEGIN bel p> u/v-p 1- 1 +pos ." > " bs c-key key                 dup u>cde range: #0 11 12 ; case: ncd 1 ocd ncd ;              UNTIL u>cde 10 umin is u/v ;                                                                                                  : fu/v u/v-p + c@ u>cde is u/v ;        ( ptr --( u/v code holen: o-u/v ?olin IF fu/v ENDIF ;           ( -- (u/v alt => vorgabe: i-u/v u/v cde>u u/v-p n-lin 2dup ! + 2+ c! ;       ( u/v neu                                                  -->                                                                                                                                              ( gegen-/konto eingabe                                 ( 82                                                                    : kto-m 24 mlin ;                                               : .kto kto-p kto-l +pos kto 0 (kto) type ;                                                                                      : k>n dup c@ bl or              ( ptr -- ptr (k/l/bl nach ziffer  associative: "k "l "1 "2 ;                                      case:        "1 "2 "1 "2 "0 ; over c! ;                                                                                       : kto-in csp!                   ( --                              ikm pad 1+ @ [ $0100 "K or ] literal -                          IF dup j-flg drop     ( msk - msk flg tab0/5 (joker              IF drop (kt) ELSE 1- number drop ENDIF       \ vorgabe o. Nr   ELSE drop lin minus dup is lin is pvl (kt) ENDIF      \ "K"     [ c-num k-num + ] literal over u< dup -error ;                                                                        -->      ( gegen-/konto prog. eingabe                           ( 83                                                                    : (konto) 24 #mlin -5 + kto-l +pos emit dup@ dup is (kt)          -1 dpl ! #imsk k-msk m>m 25 .msg !csp kto-in swap ! ;                                                                         : >KONTO  ' kto bl kto-p (konto) ;                              : >GKONTO ' gkt "G gkt-p (konto) ;                                                                                              : (fkto) >r 0. pad 1+ r> over kto-l   ( vari sptr --(num to vari  2dup 2+ blanks cmove k>n 1- convert 2drop swap ! ;                                                                            : (okto) ?olin IF + (fkto) exit ENDIF 2drop ;                   : o-kto ' kto kto-p (okto) ;            ( vorige kto-eintragung : o-gkt ' gkt gkt-p (okto) ;            ( dto., gkt                                                                     -->                                                                      ( konten bearbeiten                                     ( 84                                                                   : (ikto)               \ val disp -- ( neu eintragen              n-lin sover ! swap 0 (kto) swap 2- dup -rot ! +text ;         : i-kto kto kto-p (ikto) ;                                      : i-gkt gkt gkt-p (ikto) ;                                                                                                      : >jar lin 1 DO i jline -cmt IF 4+ count $f and 10 *              swap c@ $f and + dup dup is jar -leave ENDIF drop LOOP ;                                                              -->     create fadr $201d , $80ee , ' b/buf , $4840 , $2b00 ,             $45fa , 6 , $4eee , [docol] , ] dr1 block update [              here 2+ , here 2+ , [dosemis] 2@ , ,                            $204e , $d0dd , $d0dd , $2b08 , $4ed3 , smudge                                                                        -->     \ : fadr b/buf um/mod dr1 block + update base+ ;  ( im datenfile ( auswertung - vari ) forth definitions                 ( 85     bh definitions   \ saldieren und kontenblätter:               ' noop defer fbv   \        --         ( vorbereitend           ' noop defer fba   \        --         ( abschließend           ' noop defer ?sel  \ p n    -- p n f   ( auswahlkriterium       ' noop defer ?kto  \ ptr nr -- p n f   ( konto passt, tf:=1     ' noop defer ?gkt  \ ptr nr -- p n f   ( gegenkonto,  tf:=2     ' noop defer ?txt  \ ptr nr -- p n f   ( textauswahl, tf:=3     ' noop defer ?kand \ p n f  -- p n f f ( AND-zusatz,  tf:=/=0   ' noop defer ?kor  \ p n f  -- p n f f ( OR-zusatz, tf:=1,2,3   ' noop defer ?mon  \ p n f  -- p n f f ( monatsausw., tf:=/=0                                                                   ' noop defer jback \        --         ( backup turnusmig     20 dup 2constant bks \                 ( backup-stufung - 1                                                             -->                                                                      ( journal aufarbeiten )                                 ( 86                                                                   : madr mem-lk + ;                     ( n1 - n2 ( adresse im ram: m-kto k-cell * madr ;               ( kto adr )                                                                               : bkto + >r 0 sp@ r> (fkto) ;         ( ptr disp -- kto.nr                                                                      : bnu >rr 2dup          \ d.brutto -- d.brutto d.netto d.ust      2dup dabs 100,00 2dup u/v u% @ m+ 2dup d0=    \ ? nur steuer    IF 2sdrop ELSE ud*/mod ENDIF 2sdrop r> d+- 2swap 2over d- ;                                                                   : nbtr                  \ ptr - d.brutto d.netto d.ust            >rr fu/v r fs/h 0. sp@ r> (fbtr) bnu ;                                                                                -->                                                                     \ : fadr b/buf um/mod dr1 block + update base+ ;  ( im datenfile ( summenbuchungen                                       ( 87                                                                   : m-val >rr             \ lfd zeile buchen ( ptr -- (ret mit dr1  nbtr s/h 0> 4* u/v                   \ d.brt d.net d.st -- b n  ust + >rr 2+! 2over r> 8+ 2+!        \ steuer & bruttobetrag     r gkt-p bkto m-kto s/h 0> 4* dup                               r> 2>r m+ 2+!l                       \ netto auf gkt            r> kto-p bkto m-kto r> 4 xor m+ 2+!l ;        \ brutto auf kto                                                                : -sld over + 0 sp@ 2+ rot (fkto) dup x-konto >r \ ptr disp --    m-kto 4@l r 4! r> k>bch swap 1 c! ;                                                                                           : >m-val                \ ptr -- ptr ( salden bertragen          dup m-val kto-p -sld gkt-p -sld dr0 ;                 -->                                                                                                                                     ( zur auswertung                                         ( 88                                                                   : -jlin swap -cmt                 \ blk nr -- ptr nr f (typ       IF t-lin sover lin-l cmove 1    \ f: 0:leer 1:journal 2+:text   ELSE c/l -trailing 2* ENDIF >r swap r> ;                                                                                      : jdsp dis pon 0< or              \ ptr nr -- p n ( schreiben     IF cr bot? drop 2dup .lin dup lin>r# ENDIF ;                                                                                  : jval >rr is pvl                 \ ptr nr -- p n ( saldieren     syn IF r is eli >m-val ENDIF r> ;                             : jsld dup                        \ ptr nr -- p n(zeile & saldo   ?sel sdrop IF jdsp jval ENDIF ; \ ggf monatsweise                                                                              case: jsel bel jsld jdsp ;   \ ptr nr c - p n (c: 1 jur >1 cmt                                                         -->     ( erste freie zeile, liste, auswertung                   ( 89                                                                   : fb dr0 fbv                                                      j-lines dup 1- lin umin is lin            \ liste begrenzn      dup b/scr - lin umin                      \ probelesen          b/scr bounds DO i jline drop LOOP         \ eine seite          w#0 dis -cr 0 over lin + lin              \ & auswerten         DO drop i 2dup <                                                 IF over- ENDIF jline i -jlin -dup 0= ?esc or                    IF leave ELSE jsel ENDIF sdrop           \ lin - schlu        LOOP sdrop dr0 dr>w dup b/scr + lin-l u* posab drop eof         IF work 1scr dr>w dup block drop ENDIF                          is lin fba ;                                                                                          safe! ;s                                                                                                                                                 ( programmteile - backup                                ( 90   bh definitions decimal -forget (bkb) if-found (bkb) ;s                                                                          : (jbk) 2>rr count-w rot count-w   \ von nach -- f ( tf:copieren        joker matchj drop 0=       \ wenn zielname angegeben und        r> dup pad f/n cmove @ 5 > \ quelle =/= ziel                    r> dup pad 80 + f/n cmove @ 5 > and and ;               : (bkb)                                                           jur jbk (jbk) p'dis -bup jbk p'dis print [ cmc0 ] ;                   ' (bkb) is jback                                                                                                        : ks-off                           \ zwischensummen lschen       kbl-s 2off kbl-h 2off kbl-b 2off kbl-n 2off ;                                                                         -->                                                                                                                                      ( personenkonten einreihen )                            ( 91                                                                   : int >rr dabs 1000 m/mod rot drop 1000 s* r> d+- ;                                                                             : dcs ?kb 0= IF drop exit ENDIF   ( disp link kfa | x bot -- d l  4@ swap rp@ 2+ @ 10000 / case: 0 p>d p>c 0 ;      \ in 'ksaldo  -dup IF dup 2swap rot 4+ 2+! 2+! exit ENDIF 4drop ;                                                                                                                                   -->                                                                                                                                                                                                     : #kn 2dup = IF #konten ;S ENDIF drop ; ( bot num -- bot \ in kb                                                                  ELSE dup 2@ rot 4+ 2@ rp@ 2+ @ 10000 / case: 0 p>d p>c 0 ;      -dup IF dup 2swap rot 4+ 2+! 2+! ELSE 4drop ENDIF ENDIF ;      ( masken- & ust-konten-detektor )                       ( 92                                                                   : ?jo -1 is (joker) g-msk dup "0 pad c!  \ genauer vergleich      joker dup >< or dup pad 1+ 2! 5 pad w= \ 2. maske war <nl>      IF k-msk g-msk m>m ENDIF               \ dann gleichsetzen      5 k-msk w= ?0= dup is jm 5 * is j5  \ ? beide ktn schreiben     k-msk j-flg j5 or is j5 is jk          \ ? kontengruppe oder    IF 0 is jg ELSE g-msk j-flg j5 or is j5 is jg ENDIF             joker is (joker) ; \ jm=1 beide ungleich, jk/jg=1 kto/gkt grp.                                                                : ?uv                                    \ msk - ukt a/p pfa | 0  1- 0. rot convert 2drop dup is kto -konto >rr                   IF r (a/p) dup IF drop dup k>a/p c@ ENDIF >r -dup               IF nfa 1+ count "| =/= over 1+ c@ ". = and swap                   2+ c@ dup "0 "9+ within? rot and 0= IF drop 0 ENDIF r>        ELSE rdrop 0 >r ENDIF ENDIF r> ;                      -->      ( maskendetektor )                                      ( 93                                                                   : ql -rot + pad m>m pad k>n 5 rot w= ;     ( ptr disp msk -- f                                                                  : qg >r dup IF >r over u/v-p + c@ r> = ENDIF                      -dup 0= IF over gkt-p r ql ENDIF rdrop ;                                                                                      : qkt over kto-p k-msk ql    ( blk nr -- b n f ( 1: kto passt     -dup -EXIT uk k-msk qg 2* ;                                                                                                   : qgk ug g-msk qg 2*         ( blk nr -- b n f ( 2: gkt passt     -dup -EXIT over kto-p g-msk ql ;                                                                                -->                                                                                                                                                                                                            ( maskendecodierung )   -->                             ( 94                                                                   maske           journal         code    jm   jk   jg   uk   ug                          flags:          k=g   joker    ust-kto  kto             kto             1       x                       kto             gkt             2       x                       kto             ust             2       x              chr      kto & gkt       gkt & ust       3       1              0    chr                                                                 gkt             gkt             2       x                       gkt             kto             1       x                       gkt             ust             2       x                   chr gkt & kto       gkt & ust       3       1              chr  0                                                                   kto/gkt  beide  gkt/kto         3       1                       gruppe gefunden aus ?bkt mit    3       x    x    x    x    x    ( bedingte auswahl                                      ( 95                                                                   : qtx fbuf? 0= -dup -exit       ( p n f - p n f f ( =/= 0 txt     over txt-p + txt-l fpad count joker matchj drop ;                                                                             : qmo mon 0= -dup               ( p n f - p n f f ( tf:=-1        0= IF 2 pick mon= ENDIF minus ; ( AND-zusatz f. monatsauswertu                                                                : qmt drop qtx qmo and dup ;  ' qmo dup is ?sel cfa ' ?sel 2+ !                                                                   ' qmo dup is ?mon     dup cfa ' ?mon 2+ !     -1   is mon                 is ?kand    ' 0   is ?kor                                 ' qkt is ?kto     ' qgk is ?gkt           ' qtx is ?txt                                                           -->                                                                                                                                      ( kontendetektor kto & gkt                              ( 96                                                                   : kgu uk ug xor "0 and 0> and or dup 3- IF drop 0 ENDIF ; ( k=g                                                                 : ?bkt ?txt dup IF drop   ( p n - p n & 0:nix 1:kto 2:gkt 3:k&g   ?kto >r ?gkt dup r or swap r> =                                 jm IF over case: drop d0= kgu drop ; ELSE drop ENDIF ?kor       IF -dup 0= IF -1 ENDIF ENDIF ?kand -EXIT drop 0 ENDIF ;                                                                       : ?a/p (s/h) ' (s/h) dup on         ( 0:nix -2:passiv 2:aktiv     m-msk 0 bkto -konto dup IF -a/p sdrop ENDIF is a/p ! ;                                                                        : ?s/h      ( ptr nr -- p n ( s/h ausgabeposition im kontenblatt  over fs/h [ btr-l 1 or 1+ 2/ 1+ dup 1- minus ] dliteral         s/h +- a/p +- k/g 2 =/= 1- +- dup sgn is s/h + spcs ; -->                                                                      ( kontenblatt - kopfzeile                               ( 97                                                                   : kbl-m 0 is ug g-msk ?uv               \ msk f -- f              IF drop is ug ENDIF                                             0 is uk k-msk ?uv >rr                                           IF is a/p is uk ENDIF                                           ks-off cr .fbuf fbuf?                                           IF ", emit space ENDIF jm jk or                                 IF 26 .msg k-msk .kms                                            jm IF 33 .msg g-msk .kms ENDIF       \                          r 0= IF rdrop 1 >r ENDIF                                       ELSE 27 .msg r IF                                                 s/h r .ktn 8 j5 + spcs 28 .msg                                  dup a/p +- is s/h r .saldo is s/h                             ELSE r message ENDIF ENDIF                           [ -->                                                                     ( fortsetzung von {kbl-m} zur kopfzeile vom kontenblatt ( 98                                                                    ]                                                                clrt cr "= strich                                               35 .msg                                                         [ btr-p dat-l + 2+ ] literal ospc                               10 .msg j5 spcs ."  U"                                          a/p 0=/= 55 - minus           \ a/p 0=/= 55 +                   [ btr-l dup 4- ] dliteral spcs                                  out @ j5 + +                                                    over .msg                                                       ospc 2+ .msg r> ;                                                                                                     -->                                                                                                                                                                                                      ( kontenblattzeile                                      ( 99                                                                   : kdsp              ( ptr nr -- p n ( kontenblattzeile schreiben  2dup dup is eli 4 .r space dup 2dup   \ datum und               .kd txt-p dat-l - + txt-l type space  \ buchungstext            gkt-p over kto-p jm jk or >rr         \ kontengruppe            0= IF sdrop k/g                       \ oder                    case: sdrop drop sdrop drop ; ENDIF   \ einzeln                 r> -1 DO + kto-l type space LOOP      \ gkt oder beide nummern  u/v-p + 2 type                        \ steuercode              over ?s/h drop                        \ ausgabeposition & s/h                                                       [ -->                                                                                                                                                                                                                                                                      ( kontenblattzeile  (                                   ( 100                                                                   ]                                                                nbtr                                  \ betrge holen           uk ug or                              \ ust-konto               IF 2>r kbl-n 2+! kbl-b 2+! 2r> ELSE   \ oder netto/brutto       2drop k/g case: 2sdrop 2drop 2sdrop ; ENDIF                     2dup .cbetrag (joker) >r -1 is (joker)  \ betrag vom kto        2over drop dup kto-p + 5 rot gkt-p + w= \ ? kto = gkt           r> is (joker) >rr                     \ betrag schreiben        IF 2dup 2dup -1 -rot .betrag ENDIF    \ ? kto = gkt             kbl-h kbl-s s/h 0< k/g 1 > xor IF swap ENDIF                    2swap rot 2+! r>                      \ ? beides summieren      IF 2+! 0 ENDIF tag 1+ is tag drop ;   \ zeilen zhlen                                                                 -->                                                                      ( kontenblatt - summen )                                ( 101                                                                  : .bkt ?bkt -dup IF is k/g cr dup is eli kdsp ENDIF ; ( konten                                                                  : ktsum "- strich 0 tag -dup    \ summen eines kontenblatts       IF dup 4 .r 1 > IF drop 62 ENDIF ELSE 31 .msg ENDIF             32 .msg .msg space .mon$ space                                  k-msk 27 jm jk or 0=/= + .msg   \ - .msg                        jm IF .kms 40 .msg g-msk ENDIF .kms                             [ btr-p 3 + ] literal >rr ospc 34 .msg                          [ s/h-p 4+ ] literal j5 + >rr ospc                              kbl-s 2@ 2dup .cbetrag kbl-h 2@ 2dup .cbetrag                   cr r> r> ospc 28 .msg ospc d- .cbetrag                          pse inkey drop ;                                 -->                                                                                                                                           ( kontenblatt - personenkonten                          ( 102                                                                  : .klin ?kb                             \ kfa -- benutztes kto    IF fbuf? 0= -dup 0=                   \ kontenname bei textmsk   IF dup nfa count 31 and width @ min >rr here -rot bounds         DO i c@ $7f and dup bl > 0= IF $80 or ENDIF over c! 1+ LOOP     here r> fpad count joker matchj drop sdrop                     ENDIF IF cr ."  per " eli jline .kd drop                         dup 2dup 2dup [ txt-l 9 + dat-l + ] literal 41 .msg             over .kto$ ospc .kto# 3 spcs .soll space .haben                 @soll kbl-s 2+! @haben kbl-h 2+!                              ENDIF ENDIF drop ;                                                                                                    -->                                                                                                                                                                                                      ( kontenblatt ausgeben                                  ( 102                                                                  : #kn 2dup = IF #konten exit ENDIF drop ; ( bot num -- bot \ in                                                                 : kb ?jo   \ tabelle gkt-maske gruppen: einzeln, gemischt, beide  1 is lin 1 is dis 0 is tag 0 is pvl syn 1 or is syn kbl-m       IF fb kto credit = 2* kto debit = +                              case: -1 d-num c-num ; 0 ' noop ' .klin ' #kn 0 lis-go drop    ENDIF cr ktsum -1 is (joker) voc>> ;                                                                                          : kl ks-off ?kb dup is dis             \ kfa --) ein kontenblatt  IF dup v>kto + 2@ <# # # # # # #> drop dup m-msk m>m dup        k-msk m>m g-msk m>m 1 is uk cr kb cr ENDIF drop ;                                                                     -->                                                                     : #kn 2dup = IF #konten ELSE drop ENDIF ; ( bot num -- bot \ in  ( personenkonten-umbuchung                              ( 103                                                                  : kxt fpad 1- @ >< (qfb) IF t-tog ENDIF voc>> ;                 : kx fbuf? IF pos .fbuf 36 mlin                                   editor y/n 0> 0= IF b> clrt t-tog ENDIF at ENDIF ;            : ktx p'dis kx [ cmc0 ] ;                                                                                               -->     : dc-lin  \ statt s-lin \ -- ( fertige buchungszeile(n) eintragn  n-lin 2+ dup kto-p gkt-p d+ dup c@ bl =/=                       IF swap 1 ELSE over c@ bl =/= ENDIF   \ bei personenkonten      IF n-lin o-lin lin-l 2+ cmove         \ umbuchung schreiben      kto gkt or 10000 / case: 0 debit credit 0 ; -dup                IF 0 (kto) bl n-lin u/v-p + 2+ c!                                2>rr rot swap cmove s-lin lin 1+ dup is lin is pvl              o-lin n-lin lin-l 2+ cmove 2r> rot swap cmove                 ELSE 2drop ENDIF ENDIF s-lin ;                                 ( saldieren, kontenbltter                              ( 104                                                                  : .b$ 37 .msg .cbetrag ;                                        : .n$ 38 .msg .cbetrag ;                                        : .s$ 39 .msg .cbetrag ;                                                                                                        : usum 4@ 2swap d- 2>rr d+ 2swap 2r> ;                          : upos [ nam-l kto-l btr-l + + 2+ ] literal swap .msg ospc ;                                                                    : u-sing .msg space .mon$ cr "- strich 2>r 0. 0. 2r>              DO i u>konto -dup IF ?kb 0= IF drop ELSE                        .ktn space i ust >rr 8+ usum btr-l spcs .b$ space               r> usum .s$ cr ENDIF ENDIF LOOP                                 "- strich #41 upos .b$ space .s$ cr "= strich ;       -->                                                                     : usum dup 2@ rot 4+ 2@ d- 2>rr d+ 2swap 2r> ;                   ( ust-erklrung                                         ( 105  : urkl >r dup u>konto ?kb       \ {dn dn} idx f -- {dn dn}        IF cr .ktn dup is u/v 0 upos ust 8+ 4@ 2swap d- bnu r            IF 2drop 2dup d0=                                                IF 2swap int 2dup ELSE int 2>rr                                  dabs u/v u% @ 0 udm* 100,00 uqd/mod 2sdrop r d+- 2r> ENDIF    ELSE 2swap 2dup d0= IF 2drop 2over ENDIF ENDIF                  2>rr .n$ 2>rr .s$ 2rot 2r> d+ 2rot 2r> d+ 2rot                 ENDIF 2drop rdrop ;                                                                                                           : rsum 41 upos 2dup d0=         \ d.steuer d.brutto --            IF 2drop btr-l 7+ spcs ELSE .n$ ENDIF .s$ cr "= strich ;      : uktn >r                                                         0. 0. 2rot DO i j urkl LOOP rdrop 4dup cr "- strich rsum ;                                                            -->       IF cr .ktn dup is u/v 0 upos ust 8+ dup 2@ rot 4+ 2@ d- bnu r  ( saldieren, kontenbltter                              ( 106                                                                  : >js ' bel 3. DO i swap is jsel LOOP w#0 ;                     : (kb) ' noop ' .bkt >js ;                                      : 'ksaldo                               \ ab lin neu auswerten    ?p-off >r <rev> 48 .msg <rev> >jar                              ' jdsp ' jsld  >js (kc) is k-cell c-ust kt-neu mem-off mem-lk   d0< IF 1 is lin mem-on mem-clr ENDIF 'ndis fb 0 ' noop          ' dcs ' #konten 0 lis-go b-ust is< ?sel r> ?p-on ;                                                                                                    forth bh-menu      definitions          : .KBLATT (kb) ktx #kmsk cr kb kxt ;    \ nr --) kt.blatt                                                               -->                                                                     : >TSALDO ' qmt is ?sel ktx >ksaldo kxt ; \ saldo textgruppe    : >KBLATT (kb) i-msk cr kb ;  -->       \ kt.blatt-eingabe       ( saldieren, kontenblätter                                                                                                     : Privatkonten  ktx [titel] k-prv #100 bounds DO                 -1 dpl ! i -konto ?kb sdrop IF i .kblatt cr ENDIF LOOP kxt ;                                                                   : Kontenbltter ktx [titel]                 \ alle konten         (kb) 0 ' noop ' kl ' #konten 1 lis-go kxt ;                                                                                   : USt-Abrechnung [titel] 10 5 1 uktn        \ mwst von rund 1,00  5. 0 uktn 2rot 4drop d+ >rr dabs r 0> 100 \ vst genau, ust auf  * m+ 10 s* int 10 m/mod rot drop r d+- cr 0.   \ rund 0,10      r> -dup IF 0< 44 + .msg ENDIF [ latest ] literal [t] rsum ;                                                                   : USt-Summen bh (kb) [titel] 5. 43 u-sing 10 5 42 u-sing ;                              -->                                                                                                     ( journalliste sortieren, einzelposten)  bh definitions                                   \ alle posten: ( blk1 blk2 -- sgn(1-2): Datum: over 4+ @ over 4+ @ - -dup IF -rot 2drop exit ENDIF      2@ swap rot 2@ swap 2swap d- 2sgn ?0= + ;  \ datum            : Text: txt-p dup d+                            \ text            txt-l -trailing rot txt-l -trailing 2swap t= ;                h] >r 0. sp@ r> (fbtr) dabs h;  dup                             : Betrag: h, rot h, 2swap d- 2sgn ;             \ betrag        : Ust: u/v-p + c@ swap u/v-p + c@ swap - ;      \ ust-code      h] sover + 0 >r rp@ swap (fkto)            ( b1 b2 disp - f              + 0 >r rp@ swap (fkto) r> r> - h;  dup                 : Kto: kto-p h, ;                               \ konto         : Gkt: gkt-p h, ;                    -->        \ gegenkonto                                                                                                                                                                                                    ( journalliste sortieren, sortiervorbereitung & -aufruf )                                                                       : s-num (sc) is k-cell                  \ lfd. nummern eintragen  lin 0 DO i i m-kto !l LOOP (kc) is k-cell ;                   ' noop defer (sel)                      \ vergleichs-aufruf                                                                     : sel-c dup is eli                      \ vergleich & auswertung  jline -cmt rot jline -cmt rot 2dup and                          IF 2drop swap 2dup (sel) -dup 0=      \ vergleich, datum nie 0   IF datum: ELSE -rot 2drop ENDIF 0< exit \ datum bei gleichhei  ENDIF 2sdrop > ;                      \ zeilennummer bei cmnt                                                                                                                 -->                                                                                                                                                                                                             ( journalliste sortieren, sortiert schreiben )                                                                                  : o-fi                                  \ ptr -- chan ff | tf     3 new-chan dup 2swap rot open 0= -EXIT message ;              : c-lis 0 >r 7 <                        \ nn --(nach auswahlcode  IF sfi jur (jbk) jur jbk (jbk) and    \ screenfile bilden        IF rdrop sfi o-fi IF 0 ENDIF >rr     \ nur einmal zum drucker    IF r ch-id prt ch-id d= pon and IF rdrop 0 >r ENDIF ENDIF      ELSE sfi print space -8 message ENDIF                          ENDIF (sc) is k-cell mon 0= lin 0                               DO i m-kto @l 2dup jline swap -dup 0= IF dup mon= ENDIF          IF swap jdsp swap 1 ' tag +! j                                   IF j to-work dup lin-l sstrg work ch-rnum -dup \ schrei         IF cr message cr r> close 0 >r ENDIF ENDIF                     ENDIF 2drop ?esc -leave                                        LOOP drop (kc) is k-cell r> 1scr ;                    -->     ( journalliste sortieren, postenauswahl & sortieren )                                                                                                      \ sortierposten auswhlen & sortieren: c-sel bel cr #74 mlin s-num c-key key bel bl or    ( -- nn      associative: "d "t  "b     "k   "g   "u   "o ;   dup            case: datum: text: betrag: kto: gkt: ust: datum: #0 ; -dup      IF 2+ dup nfa <rev> id. <rev>                                    is (sel) ' sel-c is precedes ' @l ' !l is d! is d@              (sc) is k-cell 1 m-kto lin 1- sort-l                            (kc) is k-cell ' @l is d@ ' !l is d!                           ENDIF ;                                ( 0...6, 7 bei <enter>                                                         -->                                                                                                                                                                                                                                                                      ( journalliste )                                        ( 109                          \ dir-anzeige wenn name auf '_' endet   : File? w#0 2>r         \ ptr msg# -- ( filenamen editieren       BEGIN 2r -dup IF cr 4>col .msg ENDIF >rr f/n pad dup off        over 2dup r> !name bel ." File:" c-key                          <rev> edline <rev>                                              2dup + 1- c@ "_ = sdrop WHILE 2- pdir REPEAT                    2- !name 4>col rdrop rdrop ;                                                                                                  : Journalliste bh       \ liste schreiben, ggf. sortiert          1 is dis 0 is tag >jar [titel] cr                               sfi #75 p'dis file? p'dis c-sel dup 1 6 within?                 IF #75 mlin ' (sel) @ 2+ nfa id. cr ENDIF dup 6-                IF c-lis cr "- strich tag 4 .r #46 .msg .mon$ exit ENDIF        ?p-off >r 'ndis c-lis cr sfi jur (jbk) -bup r> ?p-on ;  -->                                                                    ( vollstndige auswertung ) bh definitions decimal                                          bh-menu definitions                 ( mon bestimmt den dargestellten zeitraum, oder mu z.b. 0 sein: Auswertung  bh                                                        fbuf?  IF t-tog ENDIF           ( ohne textauswahl              4>col p'dis 'ksaldo                                             kontenbltter   p-pge                                           saldenliste     cr cr                                           ust-summen      cr cr                                           ust-abrechnung  p-pge                                           privatkonten    p-pge   kxt ;                   -->                                                                                                                                     : 'ksaldo <rev>    \ salden ermitteln                            48 .msg <rev> >jar bh-menu 'ndis >ksaldo [ cmc0 ] ;                                                                             ( buchungszeile eingeben ) bh definitions decimal       ( 110                                                                  : >BUCHUNG       lin >rr                 \ kontrollnummer         is pvl n-lin clin blin                 \ vorgngerzeile         BEGIN f-lin BEGIN                      \ oder korrektur           o-dat >datum  i-dat                  \ datum eintragen          otxt >text   ntxt r lin =/=          \ text oder               WHILE rdrop lin abs >r REPEAT         \ ? vorige "K"orrektur    r IF                                  \ ? zeile neu              o-btr >betrag r lin = IF i-btr       \ betrag & programmierg    o-s/h >s/h    i-s/h                  \ soll, haben, cashflow    o-u/v >u/v    i-u/v                  \ ust-codierung            o-kto >konto  i-kto                  \ konto                    o-gkt >gkonto i-gkt  ENDIF           \ gegenkonto oder "K"                                                        [ -->                                                                      ( buchungszeile eingeben                                ( 111                                                                   ]                                                                  r dup IF lin =/= ENDIF ENDIF        \ ? zeile per nummer      WHILE r abs dup is lin is pvl REPEAT  \ ? selbe zeile nochmal   rdrop syn 0<                          \ ? diese zeile drucken   IF p-prt p-on .n-lin cr p-dis p-on ENDIF                        nul-m s-lin                           \ zeile(n) eintragen      -1 is mon 'ndis fb                    \ buchung auswerten       bks dup 0> IF                         \ ggf. sicherungscopie     1- -dup 0= IF dup 64 #mlin jback ENDIF                         ENDIF is bks ;                                        -->                                                                                                                                                                                                                                                                      ( editor-anpassung )      editor definitions decimal   ( 112                                                                    range: jb    #0  7 37 49 51 53 59 ;    \ eigene tab-bereiche    case:  jc #0 #7 37 49 51 53 59 64 ;    \ und positionen        if-nfound (tb)  ' jb defer (tb)                                 if-nfound (tc)  ' jc defer (tc)                                 if-nfound bt    : bt r# @ c/l mod dup (tb) (tc) swap - (m) .f ; : [l] >rr ' noop is pcr (l) is< pcr scr@ b/scr *                  r> + wid pos sdrop - -5 + 0< 0= IF dup 5 .r ENDIF drop pcr ;  : [p] scr@ lin b/scr /mod               \ list screen             swap 0> + < 0= IF p-prt p-on 0 l. p-off exit ENDIF drop -1 ;      csp@ >r 0 !csp drop -find b# csp! 0= 0= r> csp !                lin-l c/l = if-true 2 +continue                             : b>r b/scr /mod scr @ - >scr lin-l * r# ! ;                    : b# p" nach Zeile #"(s#) b>r ss off l >pad ; \ für journalliste                                                        -->      ( buchen und editor-anpassung                           ( 113        bel       --> :HIER: das musz komplett angepaszt werden:                                                                  : >ed bh 210 edi-key ' b# is (ecs)              \ c^ zeilenweise  -24 edi-key ' 0= 0 edi-key over is (ecs) is (ecs) \ ohne close  9 edi-key ' bt is (ecs)   ' [p] is pl         \ journal-tabs    ' jb is (tb) ' jc is (tc) ' [l] is .l ;       \ zeile & nummer                                                                : ed> bh 210 edi-key ' l# is (ecs)              \ c^ screens      -24 edi-key ' (cs) 0 edi-key over is (ecs) is (ecs) \ quitclos  9 edi-key ' c-t is (ecs)        is< pl        \ standard-tabs   is< (tb) is< (tc) is< .l ;                                                                                                     >ed " >post" sfind                                              if-true 2drop ' >ed is >prae ' voc>> is >post                                                                          -->      ( buchen und editor-anpassung  )                        ( 114                                      bh      definitions                                                                         : (buchen)                      \ programmschleife zum buchen     p-off syn 0< IF p-prt p-on p-start p-dis p-on ENDIF             BEGIN >ed l .f 'mlin noop >buchung sp! lin 0= UNTIL ;                                                                         : fl 1 screen dup new-chan >rr  \ ptr -- open & laden             to-chan rot c-open 0= -7 -error [compile] bh                    1 load screen close cr r screen to-chan r> close ;                                                                            : sufx 2dup@ -dup             \ suffix dest srce -- ( endung      IF cmove -3 over +! swap +text exit ENDIF fdrop ;                                                                     -->                                                                                                                                      ( buchen, vorspann )                     bh      decimal                                                                       : Files a-close empty-buffers cr cr         \ files, kanäle       0 -konto 0=                                                     if ktn 70 file? ktn fl voc>> endif        \ konten laden        credit -konto is p>c debit -konto is p>d  \ nummern anpassen    drk 69 file?                              \ drucker             jur 49 file? jur @ 0= IF bye ENDIF        \ journal             dr0 0 screen jur c-open 0= IF jur o-fi -7 -error 1scr ENDIF     (screen) f/n jur !name                                          " jbk" jbk jur sufx " sfi" sfi jur sufx " mem" dat jbk sufx     jbk 63 file? mem-lk d1- d0<              \ reserve & speicher   IF free -4096 m+ k-len d< IF dat 50 file? ENDIF ENDIF ;                                                                 -->                                                                                                                                    ( buchen                                                ( 117                                                                  : buchen cr !csp                           \ standard             47 mlin c-key key 27 = -EXIT                  \ bleibt...       voc>>                                         \ oder buchen     screen is-open mem-lk d1- d0< or              \ screenfile      0= IF ?p-off !csp cls files csp! ?p-on ENDIF  \ oder eingabe    [ last @ pfa cfa ] literal                    \ erneut buchen               (quit)          !                 \ bei fehlern     cls 'ndis (buchen) [ cmc0 ] ;            \ weiterbuchen                                               -->                                                                                                                                                                                                                                                                                                                                                      ( buchhaltung )          bh-menu definitions            ( 118                                                                  : Journal bel @order forth cls bot 4/ wid 4/ !order at            [ latest ] literal [t] sp! 0. !csp files cr buchen ;                                                                          : >KB                   \ kontenbltter m. maskierung lt eingabe  (kb) p> 68 p'dis .msg             p'dis y/n                     0> IF kontenbltter exit ENDIF                                  BEGIN voc>> i-msk cr kb cr p'dis kto-m c-key key 27 = UNTIL ;                                                                 : Copyright.hpr'93 cr cr 4>col                                  \  [ ' noop cfa ] literal ' () @ =/= IF 73 .msg ENDIF             [ latest ] literal [t] ; last @ pfa is cy                                                                             -->     \ quartalcode:  I: 769   II: 1540   III: 2311   IV: 3082        \                $0301      $0603       $0907      $0b0a         ( buchhaltung )                bh definitions decimal                                                                          : cmo ?p-off >r p> mtt 8+ .msg 76 .msg mon clrt (s#) -dup         IF is mon ELSE pad @ bl or [ $100 "y or ] literal over          = swap [ $100 "j or ] literal = or IF -1 is mon ENDIF ENDIF     4>col 'ksaldo r> ?p-on ;      \ monat/[J]ahr eingeben                                                                         : clc p'dis vval val-in f. ;    \ rechnen                       : cwr b> 13 p'dis ?mtt          \ text schreiben, bis leerstring  ENTER BEGIN pad print ENTRY p'dis (s@) pad @ $011b < UNTIL ;                                                                  : cvl voc>> 4 p'dis mcr eval p'dis cr [ cmc0 ] ; \ 4th-ein      : cby cr ' bye is error                                           screen is-ochan IF flush ENDIF mem-off bye [ smudge           : cem in-cons wmov 'ndis cls c-key ;               -->                                                                           ( buchhaltung )                                         ( 119                                                                  : ml bh    \ -- nadr ncnt max# 1st# otos (menu display-parm       pxenq 620 > 0 swap csize fdrop    \ ggf. breite schrift         mtt 1- sp@ >r dup mtx + >rr 0 over 1+ msg@ -rot 2drop 2>r       DO i msg@ dup 2+ rp@ 4+ 2dup +! dup@ wid -                       0< 0= IF dup 2@ drop 1+ -rot 2! ELSE 2drop ENDIF               -1 +LOOP r> 0=/=   minus   r> + 2r> ;                                                                                          #9 is mon          ' buchhaltung cfa (quit) ! \ auto-start                                                                                                                                                                                             -->                                                                                                                                                                                                      ( buchhaltung                                           ( 120                                                                  \ : bc $7079 $436f -kname dup                                   \  IF 0 -konto over - swap nfa lit+ $b 2@ [ ' 4>col nfa even 4-]\ literal 2@ rot xor or xor $dfdf and or 0= ENDIF -EXIT         \ qc cy in>w bel 500 inkey 27 = -EXIT -15 message cby ;         \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                      h] dup mnu + 0 mtx 1- wraps is mnu h;    dup                    : mse ( 1/3 -- -1/1 ) 2- h, ;                                   : mee ( 2/4 -- -1/1 ) 3- 6* h, ;                                \ ^^^(alter name "msm" wurde aus den heapmemworten compiliert)  : dt. date$ 5 -8 d+ type ", emit space day$ type ;              : ky d1- BEGIN                          ( at-posn -- key   )      drop dup 0 at dt. key curd ddup + UNTIL sdrop ;                                                                       -->      ( buchhaltung ) decimal                                 ( 121  : mn                            \ --) {mnu} posten auswählen      ml 2>r pon >r p-off dup 1+ mcr minus bot + >rr 2- 0 >rr at      cls>lin mcl dup strip paper cls>eos cr dt. ."  : "              lin . bs 32 .msg 62 .msg space .mon$ 66 .msg 777 io-time !      BEGIN 2r at c-key mtx 0                                          DO i    [fp]  pick           dup 2+ wid pos sdrop - -            2r = 3* + 0< 0= IF cr ELSE i IF ."   " ENDIF ENDIF              in-cons i mnu = 2>rr rev type 2r> 0= rev                       LOOP 2r> 2r 0= 2- - .msg 2>rr ky                                associative: 27 192 208 200 216 10 32 252 ;           editor    dup case: ende mse mee mse mee 0= 0= ptr noop ;                0= UNTIL -1 io-time ! w#0 0. strip paper    \ ^^^msm ->mee^^^^  2r> d2- at cls>lin cls>eos                                      r> ?pset rdrop r> sp@ - 2/ ndrop ;                    -->                                                   \ ^^^msm ->mee^^^^ ( buchhaltung                                           ( 122                                                                  : bp                                                              BEGIN sp! 0. !csp -1 is syn voc>> mn @order bh-menu              mnu >rr case: journal        journalliste saldenliste \  0                    ust-abrechnung >kb          auswertung  \  3                    kontenplan     clc          cmo         \  6                    ded            jback        p-pge       \  9                    pcr            cwr          cvl         \ 12                    cem            cby          p-tog  ;    \ 15          r> 8 < IF cr cr ENDIF                                      AGAIN !order ;                                                                                                                                                                        -->                                                                                                                                      ( buchhaltung ) bh-menu definitions                                                                                            : Buchhaltung bhw sp! 0. !csp cy                                  " mt_tra" basic tra-0 atne in-cons >fount                       is< ?sel quit>> >error<                                         [ last @ pfa dup ] literal [ cfa ] literal (quit) ! is error    bot 4/ wid 4/ at [ latest ] literal [t]                         files printer p-tog voc>> 5 mcr                                 -1 is mon -1 is syn ' >sc dup is fbv is fba                     4>col 'ksaldo voc>> bp ;                                                                                                                                                                        bh-menu ' buchhaltung forth definitions is buchhaltung ;skonto-definition )                                    ( 36                   hidden definitions                              : !lk -link vp -rot v, ! ; ( d.data lkvari -- )                                 bh definitions                                  : KONTO <builds vp ,                                            \ dup -konto IF dup 2 .msg . latest id. space 4 message ENDIF     vp k-siz vallot >v dup k-siz erase (a/p) over k>a/p c!          (a/p) cv, 0. cv, 2dup v, v, num-lk !lk                          0. pad 2! latest count #31 and width @ min pad swap cmove       pad 2@ n-msk 2and 2dup v, v, nam-lk !lk 0 v,                    does>v dpl@ 3+ -exit v>kto + cell+ @ -1 dpl ! ;                           : db-konto ' -konto [ here ] literal (gb) 2! 4 tdb ;                                                        -->     \ 0. v, v, 0. v, v, 0 v, (a/p) cv, 0. cv, 2dup v, v, num-lk !lk \ dsoll | dhaben | USt | a/p | 0.kt| #ptr | d.chr | "ptr | » | »\ dsoll | dhaben | USt | a/p | 0.kt| #ptr | d.chr | "ptr | » | »
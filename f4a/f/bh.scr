 --> ******************* F4 BUCHHALTUNG ******************* <--                                                                              nach Vorlage zum F6-4th v. 25. Dez 1993                                von h.-peter recktenwald                                   D-12159 berlin-friedenau, albestr. 21                                                                                                                                                    (C) Copyright 2003 by h.-peter recktenwald Berlin               2002 März 27 13:59h          We 2003-08-20 11:46                                                                         experimentelle weichware OHNE GARANTIE für Linux und F4 Forth,      frei zu privater verwendung gemaesz "QT-Lizenz 1.0",            sonst bitte e-mail: <mailto:f4bh@lxhp.in-berlin.de>           programmquellen: http://www.lxhp.in-berlin.de/lhpf4.html                                                                                                  latest: We 2003-09-10 23:38         cr    .(   JOURNAL & BUCHHALTUNG (C) .hpr'93/02,2003/08 ) cr                                                                   \ bh nach f4f(ranum), f4m (array), f4p(printer), f4ed(editor)                                                                   root definitions                                                forget bh : bh ;                                                : safe! last @ fencehprhpr'93/02--2003/08 )                                                                                                                                                                                                 \ l-load printer   l-load fbuf                                                                                                          4 2+ load                \ text, voc, cons, print        bh   #20 2+ load                \ bh texte 2                    bh   #30 2+ load                \ bh programm 1                 bh   #50 2+ load                \ bh programm 2                 bh   #90 2+ load                \ bh programm 3                                                                                    -->                                                                                                                                                                                                                                                          ( programm einrichten )                                                                                                                                                                                                                                            (file) f/n " bh.gls" !name                                      also editor also bh                                                     >ed              \ editor-anpassung                             >cashflow        \ lfd. auswertung dem betrage nach             voc>>            \ programm                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ( cons 5, fp-drop/dup )                   decimal       (  4                                                                                                                                                                                                   \ : >error< [ here 2+ ' error @ ] literal                       \   [ 0 is cmc ] ' error dup @ literal ! ! ;                    \    ^^^^^^^^^^^ !!                                             : >error< [ (error) @ ] literal (errorcons 5, fp-drop/dup ) forth definitions decimal       (  4                                                                    defer Buchhaltung                                               defer y                                                                                                                         vocabulary bh immediate bh definitions forth                   \ search order: ... assembler [ bh konten bh-menu ] forth ...                                                                    vocabulary bh-menu immediate   ' forth   is bh-menu             vocabulary konten immediate    ' bh-menu is konten                                             ' konten  is bh                 : 4th    [_] forth ;                                            : voc>>  [_] forth [_] konten [_] bh definitions [_] bh-menu ;  : kvoc>> voc>> [_] konten definitions ;                                                                                 -->                                                                      ( vari & cons ) bh definitions decimal                  ( 5                                                                    \ positionen in der {konto}-definition \ 2. linkposten noch frei0. 2variable num-lk         16 constant k-link \ #-link                              k-link 4- constant k-disp \ kto#                                k-disp 2- constant k-a/p  \ c aktiv/passiv                      k-a/p  1+ constant k-bch  \ c kto benutzt                       k-a/p  2- constant k-ust  \ ggf steuersatz 0. 2variable nam-lk  k-link 6+ constant n-link \ $-link         " VSMW" 2+ count-w constant vst-m @ constant mws-m \ ust.kt-msk $5f5f.5f5f 2constant n-msk  20 constant nam-l  \ max.len kt-name                                                                 1400 constant debit  1600 constant credit     \ sammelkonten    1900 constant k-prv                           \ 1. privatkonto  9999 constant k-num                           \ max# sachkonten10000 constant d-num 20000 constant c-num  --> \ deb-/creditoren ( vari & cons ) bh definitions decimal                  (  6                                                                              64 c/l max constant lin-l    \ zeilenl€nge             6 constant dat-l 29 constant txt-l    \ len der eintragungen   11 constant btr-l  5 constant kto-l                                                                                                         dat-l 1+ constant txt-p    \ positionen der            txt-p txt-l +  1+ constant btr-p    \ journalzeile              btr-p btr-l +  1+ constant s/h-p                                        s/h-p  2+ constant u/v-p                                         u/v-p 2+ constant kto-p                                 kto-p kto-l + 1+ constant gkt-p                                                                                              1 constant lin    0 constant pvl      \ lfd.nr & vorg€nger      1 constant eli    0 constant mnu  --> \ fehlerzeile, menu                                                                      ( vari & cons ) bh definitions decimal                           1 constant tag    1 constant mon   94 constant jar              0 variable txt txt-l allot txt txt-l ptext" buchungstext"     0. 2constant btr    1 constant s/h    0 constant u/v              0 constant kto 9999 constant gkt    0 constant (a/p)                                                                            1   constant a/p  1 constant k/g      \ k.blatt aktiv/p kto/g                                         \ synchronauswertung    forth if-nfound syn definitions 1 constant syn                     bh definitions                                                 1   constant (s/h)                    \ flag 1:+/-  0:s/h     217   constant +/-                      \ ascii f‡r +/-         {9 1+ constant {9+                      \ zifferngrenze         209   constant mcl              -->     \ menu-hintergrundfarbe                                                                                                                                  ( vari & cons )                                                                                                                lin-l variable n-lin lin-l vallot       \ neue buchungszeile    lin-l variable o-lin lin-l vallot       \ vorige                lin-l variable t-lin lin-l vallot       \ arbeitszeile,saldieren                                                                : pause work ch-id rot in>w qdos inkey drop set-work ; ( time --                                                                 work ch-id in>w -6 >bot m> set-work " hpr'" 2+ 2@ , ,          : 4>col wid 4/ >col ;                                                                                   -->                                                                                      work ch-id in>w          \ -1 >bot b>  -2 >bot p>  -3 >bot k>        -6 >bot m>          \ -4 >bot o>          bot 1- >bot t>   set-work                               -->                                                                                      ( filenamen )    also forth definitions                (  9    f-name dat flp2_cc00_mem                \ datenfile             f-name jur flp2_cc00_jur                \ journal               f-name ktn flp1_kt_scr                  \ konten                f-name jbk flp2_cc00_jbk                \ journalsicherungsdateif-name sfi flp2_cc00_sfi                \ sortiertes journal     if-nfound drk f-name drk ser1          \ drucker oder printfile sysflg d1+ d0< if-true drk fname" par"                          if-nfound msg f-name msg flp2_msg_scr  \ programm-meldungen    f-name msd flp1_msg_dat                 \ dto als bin€rfile     msg fname" flp1_msg_scr"                                        : .msg bh msg@ -dup IF p'work type-l ELSE 2drop ENDIF ; ( nn --                   previous              safe!                   (screen) @ 5 > if-true (screen) 2+ dup msg 2+ 2@! msd 2+ 2@!                                            ;s                                                                                       ( : mf ( fehler-/meldungen laden         ( von scr 120 (  10                                                                   : mf 58 msg@ 0=         also editor     \ texte holen             IF mss ss @ 0= -3 ?error msd 1 new-chan >rr open drop            IF w#0 4>col sysflg drop >|< {G - sdrop                          IF ." Messages " ELSE ." Text vom " ENDIF                       dr0 msg 0 file? 4>col msg fl                                   ELSE r to-work pad 4 fstrg drop                                  0. posab drop pad 2@ $2020.2d2d d=                              IF hlp 1024 fstrg-l ENDIF msgmem 2dup heap-len drop fstrg-l    ENDIF r> close       previous                                  ENDIF 2drop ;                                                                                                 ;s                                                                                                                                                                                                               ( : bhw ( bh-fenster                     ( von scr 110 (  11                                                                   : bhw also pif w#0 in-cons wd-size outl clrsc                     0. strip paper cls sysflg 1+ d0< 2* 2+ 222 border previous ;                                                                                                                  ;s                                      \  clrsc 16 0 238 512 0 outlscr )                               ( von scr     ( 13                                                                    : 1scr -dup 0= -exit            \ min. eine leere seite           to-work c/scr dup flen 2dup d0= IF 2drop                        ELSE 2>rr rot m/ - c/scr dup 2r> rot m+ posab drop ENDIF        + 0 DO bl sbyte LOOP work close in>w ;                                                                                                                                                ;s                                                                         ELSE 2>rr rot m/ drop - c/scr dup 2r> rot m+ posab drop ENDIF  LOOP ENDIF () is lin fba in>w r> is syn ; safe!                                                                               : 1scr >rr \ min. eine leere seite                                IF c/scr dup r to-work flen 2dup d0= IF 2drop                    ELSE 2>rr rot m/ - c/scr dup 2r> rot m+ posab drop ENDIF        + 0 DO bl sbyte LOOP r close in>w ENDIF rdrop ;               ( simultan drucken ) bh definitions decimalsimultan drucken ) bh definitions decimalsimultan drucken ) bh definitions decimalsimultan drucken ) bh definitions                     ( 16                                               -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ( simultan drucken ) bh definitions decimalsimultan drucken ) forth definitions                  ( 19                           safearbeitsspeicher ) bh definitions decimal              ( 20           -forget k-cell if-found k-cell ;s                                                                                       5    constant 5                         \ oft gebraucht & case: \ 100  constant dmo                     \ journalbegrenzung demo8    constant (kc)                      \ kto-eintragung bytes  2    constant (sc)                      \ sortier-eintragung    (kc) constant k-cell                    \ kto-eintragung bytes  c-num k-num + 1+ k-cell m* 2constant k-len \ speicherbedarf                                                                     0    constant mem-fl \ -1(heap) 0(ohne) 1(file) mem-auswahlflag -1   constant mem-ch                    \ 3  o. datenfile-kanal -1. 2constant mem-lk                    \ adresse/kanal-id/-1   k-len 4 m/mod drop heapmem bhmem drop   \ ram saldierspeicher                                                           -->                                                                      ( scalierungsconstante )                                ( 21   only forth also qdos also bh also definitions also decimal                                                                         10   constant s-scl                  \ ganzzahlen-scalierung    100  constant j-scl                  \ text-scalierung       fp 1000 constant f-scl rvoc             \ f.p.-scalierung                                                                       : b-ovf fp dup abs 214783000 - 0> rvoc ; \ fp - fp f)tf ‡berlauffehler-/meldungen )                                   ( 22      only forth also qdos also bh also definitions also decimal                                                                    if-nfound mtt         74 constant mtt  \ erster menutext        if-nfound mtx         18 constant mtx  \ anzahl menutexte                                                                              (dir)  f/n (boot)   !name                                       (boot) f/n (screen) !name                                       l-load 1scr      l-load bhtext    l-load -mnam                  ftest   flp2_msg_scr    ddup                            if-true ftest   flp1_msg_scr    sdrop sdrop dup                 if-true pad (boot) f/n cmove    1 s-load                                (dir)  f/n (boot)   !name                               if-true ;s                                                                                                      -->                                                                              ( fehler-/meldungen )  forth definitions also editor     ( 23                                                                  \ helpscreen aufbauen                                            scr @ l-word f/n " bhtext" !name l-find i/o to-work scr @       1- b/scr * b/buf u* posab drop hlp c/scr fstrg-l drop scr !                                                                    \ gepacktes textfile mit hilfs- und menutexten erzeugen          edif drop 2+ msd 2+ 4 cmove      \ textfile                     msd 3 new-chan >rr open r> -rot                                 if-true message blk 2@ edif drop -print b/scr /mod . . . ;s     drop work ch-id 2>r >rr to-work                                 hlp c/scr sstrg-l              \ helpscreen sichern             msgmem 999 msg@ drop 1 msg@    \ und meldungstexte              drop d- drop 2+ sstrg-l                                         r> close 2r> set-work                                                                          previous ;s                       -->  cQ ins/ovw  cS split  csS join lines  cF fetch ovf  <--   c¾   scr{#}         a¾/¿ prev/next scr   c½/¼  del char         as¾  1st scr        as¿  last scr        cs½/¼ del word         as¼  hot get 1st    acs¼ hot get next    as½   push to hotbuf   ac¾  inst date$     ac¿  backup file     acs¾  clr pad          c¾¿  find{text}     a¾¿  find next       s½/¼  move found len   as¾¿ clr till{text} ac¾¿ find&del{text}  s¾¿   replace{text}    cF1  new 1st file   csF1 new 2nd file    sF1   toggle 1st/2nd   aF1  compile screen acF1 print screen    cF2   drop line        F2   push & delete  sF2  copy to pad     csF2  clear line       F3   spread & pop   sF3  copy from pad   csF3  spread & clr     F4   refresh scr    cF4  restore scr     acF4  store scr        sF4  append one scr csF4 truncate file   asF4  copy scr to {#}  aF4  window         F5   flush file      asF5  copy multi       aF5  inst screen    sF5  toggle update   csF5  clr scr{#}       cESC quit (acX)     aESC flush&quit (cX) csESC break (cW)     µ ( : bhtext ( unmittelbar hiervor muœ die helpscreen stehen ( 250. msgmem 2!l                                                    msg"  Fehler bei Zeile "       msg" Kto#"              (  1 ( 2 msg" Konto [name]/[nummer] mit ["                      (  3 32  msg" ] f‡r Gruppen eingeben"                           (  4 32  msg" Text"          (  5 37)   msg"  neu"              (  6 37  msg" -Maske ["      (  7 38)                                    msg" Text "         (  8 38)   msg" Kto"               (  9 38  msg" Gkt"           ( 10 38)   msg" >Gegen-"           ( 11 38  msg" Summe Klasse " ( 12 47)   msg" G&V  "             ( 13 50  msg" Rohgewinn  "   ( 14 50)   msg" Betriebsergebnis  " ( 15 50 msg" kein kto. "    ( 16 50)                                    msg" [aESC]edit [ESC]quit  [+/-]curs: ¿¾ Tag  a¿¾ Mon  c¿¾ Jahr msg" Buchungstext: []alt/Eingabe/[K]orrektur #"        ( 18 65                                                 -->                                                                              msg" Text>"         ( 19 65)                                    msg" Betrag: []alt/Zahl/Rechnen/Programm-Eingabe"      ( 20 67  msg" §BERLAUF:"     ( 21 67)   msg" VSt/MWSt: "        ( 22 70  msg" [ ]ohne []"    ( 23 70)                                    msg" Konto: Name/0..9/00-29999/L0000-K9999"            ( 24     msg" Kto>"          ( 25 73)    msg" Gruppe "          ( 26 87  msg" Konto " ( 91)  ( 27 87)    msg" Saldo: "          ( 28 87  msg"  >"            ( 29 45)    msg" Datum"            ( 30 74  msg" ohne"          ( 31 91)    msg"  Buchung"         ( 32 91  msg" mit "          ( 33 87)    msg" Summen: "         ( 34 91  msg" LfNr.  Dat."   ( 35 91)    msg" ? Mit Textauswahl" ( 36 92 msg" Brutto:"       ( 37 93)    msg" Netto:"           ( 38     msg" Steuer:"       ( 39   )    msg"  & "              ( 40     msg" Summe:"        ( 41 95)    msg" Ó MWSt"           ( 42 97                                                 -->                                                                              msg" Ó VSt"         ( 43 97)    msg" Guthaben,"        ( 44 97  msg" Zahllast,"     ( 45 97)    msg"  Buchungen "      ( 46 98  msg" [esc] Fertig, oder [taste] n€chste Buchung"       ( 47 101 msg"  ...Salden aufarbeiten..."                        ( 48 104 msg" Journalliste von "                                ( 49 115 msg" 240K Arbeitsdaten auf "                           ( 50 115 msg" Jahr"                                             ( 51     msg" JanFebMrzAprMaiJunJulAugSepOktNovDez"     ( 52 mon$ 1..12  msg"  neu" ( 53 44)  msg" [S]oll, [H]aben, [][ ][0]+/-" ( 54 69 msg" [+]"           ( 55   )    msg" Soll"             ( 56 88  msg" [-]"           ( 57   )    msg" Haben"            ( 58 88  msg" Rechenoperationen f‡r Flieœkommazahlen:"          ( 59     msg" DM>"                                              ( 60     msg" Aufrufe zu Buchhaltung und Auswertung:"  msg" en" ( 61 62                                                 -->                                                                              msg" Journal-Sicherungs-"       msg" Backing up... "   ( 63 64  msg" §bernahme Zeile #"                                ( 65     msg" Auswahl [¼/½][enter] [esc]neu"                    ( 66     msg" Vocabular "       ( 67)    msg" Alle Konten "     ( 68     msg" Druckerausgabe an Ger€t/"                         ( 69     msg" Konten vom "      ( 70)    msg" Summe Debitoren " ( 71     msg" Summe Creditoren" ( 72)    msg" DEMO-VERSION "    ( 73     msg" Nach Datum [O]rdnen, Journal-[L]iste ausgeben."   ( 74*2   msg" Sortiert: [D]atum [T]ext [B]etrag [U]-Code [K]to [G]kt  " 10 74 msg@ 75 msg@ -rot 2rot 2rot + 1+ -rot d1- c!l d1- c!l      msg" Sortiert nach "   ( 75)                                    msg"  Quartal I:769 II:1540 III:2311 IV:3082"          ( 76                                                    -->              msg" JanFebMarAprMaiJunJulAugSepOktNovDec" ( U.K. 52 mon$ 1..12                                                                                                                                  ( TEXT zur BUCHHALTUNG                                ( 29    \ menu-texte ab {mtt} k„nnen verwendungsgem€œ abge€ndert werden.msgmem @l is mtt           \ erster menu-text bei mtt            msg" Buchen"             ( m1)  msg" Journalliste"     ( m2     msg" Summen-/Saldenliste"( m3)  msg" USt"              ( m4     msg" Kontenbl€tter"      ( m5)  msg" Auswertung"       ( m6     msg" Kontenplan"         ( m7)  msg" Rechnen"          ( m8     msg" Monat/Jahr"         ( m9)  msg" Editor"           ( m10    msg" Sicherungscopie"    ( m11) msg" Neue Seite"       ( m12    msg" Neue Zeile"         ( m13) msg" Text schreiben"   ( m14    msg" Prog.-Eingabe"      ( m15) msg" Fenster"          ( m16    msg" Schluœ"             ( m17) msg" Drucker½"   ( mtx ( m18                   msgmem @l mtt - is mtx                          \ ende menu-texte ab mtt, mtx muœ deren anzahl angeben           msg" ein"       msg" aus"      \ zusatz druckerstatus  ( m19/20                                                                 ( fehler )     forth definitions decimal                       : ?error swap IF w#0 message #200 pause abort ENDIF drop ;                      also editor also bh definitions decimal also    : clrt in>w curdis clrrt ;      #11 load  \ bhw f‡r bh & ende   : nul-m bell b> clrt b> ;       : nm nul-m .msg ;               : mlin -compile nm ;                            immediate       : erlin 1 mlin eli . ;                    ( nn --               : .id (prompt) ddup @ 2>r on count 31 and -dup                    IF 0 DO count $7f and dup bl < IF $80 or ENDIF prompt LOOP      ENDIF r> r> ! drop ;                                          : ?depth depth 1- > 20 ?error ;           ( nn -- (min. depth   : ?ferr -dup IF dup 1+ 0< over -10 =/= and ( nn -- err | 0 --     IF j 2+ nfa .id message space -1. ?error ENDIF drop ENDIF ;   : ?index IF -4 ?ferr ENDIF ;              ( 2array im steuercode: ?konto -EXIT ." Konto ?"1. ?error ; --> ( suche nach nam                                                                       ( diverse )                                             ( 31                                                                   \ jede zeile, die nicht mit einer ziffer beginnt, ist kommentar : -cmt dup c@ {0 {9+ within? ;      ( ptr -- ptr f (ff kommentar                                                                 if-nfound c-key : c-key 1 keyrow drop ; \ tastatur leeren                                                                      : c voc>> forth ' buchhaltung dup cfa hidden (quit) ! is error ;  \ f‡r programmeingabe position & daten sichern & restaurieren : in>> (in) in ! tib> ;                  \ i/o-ptr zur‡ckstellen: quit>> [ ' quit cfa ] literal          \ standard quit & error  hidden (quit) rvoc ! default-is error voc>> ;                 : ende a-close quit>>                    \ aufgeben oder nochmal  tib> bhw y space 15 message c -1. ?error ;                                                                     -->            \ : k>ust 1 > ?konto k-ust + ;        ( pfa -- ustptr |abort     ( datentypen )                                          ( 32                                                                   : btr>f btr d>f fp f-scl / rvoc ;       \ betrag als fp-zahl    : f>btr fp f-scl * rvoc f>d is btr ;    \ fp-zahl als betrag                                                                    : fpvoc? context @ 7+ c@ 0=/= ;              ( -- f(tf im fp-voc                                                                : fpval? depth 2 > fpvoc? dpl@ -2 = or and ; ( -- f( tf fp-zahl                                                                 : v-dup fpval?        ( -- ( dup vocabular-/zahlentypenabh€ngig)  IF fdup ;S ENDIF dpl@ 2+ case: fdup dup 2dup ; ;                                                                              : v-cons fpval? IF fp constant rvoc ;S ENDIF ( voc. cons          dpl@ 0< IF constant ;S ENDIF 2constant ;              -->                                                                     \ : .id (prompt) ddup @ 2>r on id. r> r> ! ;                     ( datentypen )                                          ( 33                                                                   \ zahl aus direkter eingabe in den geforderten typen umwandeln:                                                                 : fp-val fpval?                              ( zahl -- f.p. )     IF 3 ?depth ;S ENDIF dpl@ 0< IF 1 ?depth s>f ;S ENDIF           2 ?depth d>f fp 10 dpl@ s>f ^ / rvoc ;                                                                                        : dn-val fpval?                              ( zahl -- double )   IF f>d ;S ENDIF dpl@ 0< IF s->d ENDIF ;                                                                                       : sn-val fpval?                              ( zahl -- single )   IF f>d ELSE dpl@ 0< IF 0 ENDIF ENDIF -18 ?error ;                                                                     -->                                                                                                                                      ( cons definition typgem€œ )  fp definitions decimal    ( 34                  -->  ( ? raus ? scheint nicht sonderlich n‡tzlich                                                                : BLEIBT bh forth   ( nn/dn/fp -- nn/dn/fp ( merkt sich die zahl  ?exec in @ >r -find r> in ! 0= IF v-dup v-cons ;S ENDIF         drop cfa @ [ also fp ' pi previous cfa @ ] literal              CASE? fp-val fdup ELSE [ ' 0. cfa @ ] literal                   CASE? dn-val 2dup ELSE [ ' bl cfa @ ] literal                   = IF sn-val dup ENDIF ENDIF ENDIF [compile] is ; immediate                                                                                                                            -->     \ damit (nur) f‡r die interpretierte eingabe z.b.:               123,45 2* bleibt  miete     \ tr€gt 246,90 ein & merkt sich     ( danach gen‡gt)  miete     \ die miete zur n€chsten eintragung 998       bleibt  miete     \ €ndert den betrag                                                                                 ( sorted linking in )                                   ( 35      only forth also qdos also bh also definitions also decimal   \ d.soll | d.haben | us | ap | 0.kt| ptr | d.chr | ptr | » | »  : -konto num-lk                 ( kto.nr -- kpfa | ff kein kto.   BEGIN @ dup WHILE 2dup 2- @ = UNTIL                   \ 1:      dup IF k-link - ENDIF sdrop ;                                                                                                 \ sortierte linkadressen vari auf top.link, €ltestes linkfeld 0 \ anordnung im speicher: [d.vergleichsdaten][bot.linkptr]       : -link dup @                   ( d.daten lkvari - top.lk bot.lk  ENTER BEGIN dup @ rot drop ENTRY dup 0= over          \ 2:1     IF drop >rr 2over r> 4- 2@ du< ENDIF UNTIL 2sdrop ;   \ 2:2                                                                    \ zur konto-def. linkadresse ermitteln und eintragen           h] -link here -rot , ! h; dup      -->   ( d.data lkvari --)                                                                     ( konto-definition )                                    ( 36                                                                   : KONTO create dup -konto                                         IF dup 2 .msg . latest .id space 4 message ENDIF                0. , , 0. , , 0 , (a/p) c, 0. c, 2dup , , num-lk h,             0. pad 2! latest count #31 and width @ min pad swap cmove       pad 2@ n-msk 2and 2dup , , nam-lk h, 0 ,                        ;does> dpl@ -3 - -EXIT k-disp + 2+ @ -1 dpl ! ;                                                                       -->          \ ptr in die kontendefinition:                             14  k-link   k-link 4- k-disp   k-disp 2- k-a/p ( link & werte) 20  n-link   20 nam-l           ( link und max len f‡r den namen    num-lk   nam-lk             ( listenverkettung                    d.soll d.haben ust% a/p d.num numlk d.nam namlk g&v bilanz       0.0  | 0.0   |*100| 0 | 0 kt| ptr | chr | ptr | » | »               hier ½|  |¼ k„nnen weitere posten eingef‡gt werden   ( ust zwischenspeicherung )                              ( 37                                                                                \ definieren: max.posten zellen/posten ARRAY {name}: 2ARRAY     \ zelle (top.num+1) reserve zur fehler-bearbeitung   2dup * dup 0< ?index create rot , sdup , + 0 DO 0 , LOOP        ;does> count-w rot umin over @ 2* * 2+ + ;                                                                                    : -kname n-msk 2and nam-lk      \ kto.chrs - pfa | ff kein kto.   BEGIN @ dup WHILE fdup 4- 2@ d= UNTIL                 \ 1:      dup IF n-link - ENDIF -rot 2drop ;                                                                                            : U>KONTO $0e30 or >rr          \ nn - pfa|0 (kto aus codeziffer  vst-m -kname -dup 0= IF r mws-m -kname ENDIF rdrop ;    -->                                                                                                                                                                                                    ( kt-plan, summen-&saldenbilanz )                       ( 38    defer (ll)     \ index --              ( aktion in liste        defer (pl)     \ disp kfa -- disp kfa  ( vorspann f‡r (ls)      defer (ls)     \ disp kfa --           ( kontenaktion in -liste                                                                : -liste dis -cr rot >r ( num lkdisp linkptr -- (liste schreiben  ENTER BEGIN 2dup swap - [ k-disp 2+ ] literal +                  @ r r [ k-num 1+ ] literal + within?                            IF bot? drop 2dup swap - (pl) (ls) dis -cr ENDIF               ENTRY @ dup 0= ?esc or UNTIL r> fdrop ;                                                                                       : #konten k-link num-lk -liste ;        ( nach nummern geordnet : $konten n-link nam-lk -liste ;        ( nach namen geordnet                                                                   : liste 1 is (s/h) [ c-num 1+ ] literal ( sach- & personenkonten  0 DO i (ll) [ k-num 1+ ] literal +LOOP ;          -->          (                                                       ( 39                                                                    0   constant jk                \ flg f‡r kto-gruppen            0   constant j5                \ ausgabespalte bei kto-gruppen  0   constant jg                \ flg f‡r gkt-gruppen            0   constant jm                \ falls masken =/=               0   constant uk                \ u-kontenblatt & kto-eingabe    0   constant ug                \ u-kto bei gkt-eingabe                                                                          if-nfound joker {# constant joker \ maske für kontengruppen                     {# is joker                                                                                            -->     : -liste dis -cr rot >r ( num lkdisp linkptr -- (liste schreiben  BEGIN @ dup 0= ?esc or 0= WHILE 2dup swap - [ k-disp 2+ ]       literal + @ r r [ k-num 1+ ] literal + within? IF bot?          drop 2dup swap - (pl) (ls) dis -cr ENDIF REPEAT r> fdrop ;     ( kontentyp, a/p flags, ust                             ( 40                                                                   : >a/p swap k-a/p + c! ;        ( pfa nn -- ( a/p flag neu      : >passiv -1 >a/p ;             ( pfa --)                       : >aktiv 1 >a/p ;                                               : >c/flow 0 >a/p ;              ( pfa -- ( cash flow ausw                                                                       : aktivkonten 1 is (a/p) ;      ( folgende konten aktiv         : passivkonten -1 is (a/p) ;    ( dto passiv                    : cashflow ' (a/p) off ;        ( dto f‡r cash flow                                                                             : >cashflow dis pse 0 is pse 0 is dis cashflow ( alles c/f-typ    ' >c/flow is (ls) ' #konten is (ll) liste is pse is dis ;                                                                     : >u%                           ( pfa fn|dn|nn -- ( u-steuersatz  fp-val fp 100 * rvoc f>d drop swap k-ust + ! ;        -->      ( konteneingabe name => nummer                          ( 41                                                                   joker dup >< or dup 2dup 2dup 2variable k-msk , ,                      2dup 2dup 2variable g-msk , ,           ( masken zum            2dup      2variable m-msk , ,           ( kontenvergleich                                                                num-lk @ nam-lk @ 0 konto test     ( temp. zum vergleich in mnam' test cfa @ m-msk ! forget test nam-lk ! num-lk !                                                                              : j-flg (joker) >r -1 is (joker)   ( msk -- flg tab joker         5 joker >< >r rp@ 1 editor match rvoc rdrop drop                0> dup 5* r> is (joker) ;                                                                                                     : m>m bl over 5+ c! 5 cmove ;           ( ptr1 ptr2 --          : m>kg dup k-msk m>m g-msk m>m ;        ( ptr -- ( msk besetzen                                                         -->       ( konteneingabe name => nummer                         ( 42   : ?kfa cfa @ [ m-msk @ ] literal = ; \ kfa - f ( ? konto-cfa                                                                     ( namen-/kurznamen-/ust-code pr‡fen   ( ptr disp len -- p d l) : mnam -rot + 1- 2dup 1- ! dup @ $0100 >         \ nicht <nul>    IF dup @ >|< 1- over {0 {9+ within? 0= or      \ eine ziffer     IF drop 0 ELSE u>konto -dup ENDIF -dup        \ ust-code        0= IF dup 1- w-find dup                       \ kontenname       IF 2drop dup ?kfa IF -1. ELSE 0= ENDIF ENDIF \ oder            0= IF dup -mnam -dup ENDIF ENDIF       \ kurzname oder          IF dup ?kfa                            \ bei namen oder code     IF 1 is uk rot drop over swap         \ konto gefunden           k-disp + 2@ <# # # # # # #> swap     \ nummer ermitteln         1- 2dup c! -rot >rr 1+ cmove r> swap \ als eingabe           ELSE drop ENDIF ENDIF ENDIF 1+ 0 rot ;  \ zur nrn-auswertung    joker dup >< or m-msk !                               -->      ( konteneingabe nach nummer/name/maske                  ( 43                                                                   : kmsk bl enclose drop over- mnam              ( ptr1 -- ptr2     dup m-msk 5 rot - 0max                                          -dup IF 2dup {0 fill + ENDIF                 ( "0" bis len=5    2swap + rot 5 min dup 2 <                    ( <nl> ausfiltern  IF over @                                    ( dann vorgabe      0= IF {0 m-msk dup 1+ 4 joker fill c! 0 ENDIF \ "0" & 4*joker  ENDIF -dup 0>                                                    IF dup 5 = IF {3 ELSE {9+ ENDIF >r 0        \ 1. aus 5 <3       DO count dup {0 j within? 0= {9+ rp@ 4+ !   \ danach max "9"     IF bl or associative: {0 {1 {2 {k {l #32 ;                                      case: {0 {1 {2 {1 {2 {0 #0 ;                     dup 0= IF is uk joker ENDIF                 \ nicht ziffer     ENDIF rot sover c! 1+ swap                 \ maske bilden     LOOP r> ENDIF fdrop m-msk bl over 5+ c! ; 0 is db-on  -->      ( konteneingabe kto & gkt                               ( 44                                                                   : #imsk pad 6 blanks                           ( nn   -- ptr      dn-val <# # # # # # #> pad swap cmove pad kmsk ;              : imsk pad kto-l over ! 2+ m>m pad width @     ( ptr1 -- ptr2     c-key edline drop dup 1- dup @ >r >r kmsk k> clrt 2r> ! ;                                                                     : #kmsk #imsk m>kg ;                ( nn -- ptr( msk vom stack  : ikm -1 dpl ! 0 is uk k-msk imsk ; (    -- ptr( msk eingeben                                                                   : (qfb) 1 txt-l 1+ within? dup IF drop fbuf ENDIF ; ( -- f      : fbuf? fbuf 1- @ (qfb) ;           ( -- tf ( bei textmaskierung: itxt 8 mlin fbuf? dup IF 53 .msg ENDIF {: emit                  0= IF fbuf 1- off ENDIF fbuf 1- txt-l c-key edline 2drop ;                                                            -->                                                                      ( konteneingabe kto & gkt                               ( 45                                                                   : msk-m nm 4 3 .msg joker emit .msg ;                                                                                           : .fbuf fbuf? -dup                   ( ggf. suchtext              IF 8 .msg {" emit -print {" emit ENDIF ;                      h] 7 .msg 5 type {] emit space h;  dup ( ptr - (display         : .msk 9 .msg k-msk h, 10 .msg g-msk h, .fbuf ; ( msk & text                                                                    : ims in>w g-msk here m>m 29 msk-m   ( masken & text              p> clrt ikm m>kg here g-msk m>m 11 msk-m uk 0 is uk             p> clrt g-msk imsk g-msk m>m .msk uk or is uk itxt ;                                                                          : i-msk p'dis ims [ ' cmc off ] ;   ( eingabe nicht mitdrucken                                                          -->     \  : msk-m nm 3 .msg joker emit 4 .msg ;                         ( demo-version                     )                    ( 46                                                                   \  defer ()                                                                                                                             safekt-plan, summen-&saldenbilanz )                       ( 47                                                                           safemnam ( ptr auf count.b -- n (statt -kname in mnam/kmsk ( 48                                                          \ 2:  : -mnam (upper) >rr 127 and is (upper)  ( ptr -- pfa | 0          count 31 and 2>r nam-lk                                         BEGIN @ dup WHILE dup n-link - nfa count 31 and                  r min 2r t= 0=                                                 UNTIL rdrop rdrop r> is (upper) dup IF n-link - ENDIF ;                                                                                                               ;s \        safe!       ( 0= IF dup 1+ 2@ -kname p>pfa -dup ENDIF ENDIF \ 2: kurzname o.\ : -kname n-msk 2and nam-lk      \ kto.chrs - pfa | ff kein kto\   BEGIN @ dup WHILE fdup 4- 2@ d= UNTIL                 \ 1:  \   dup IF n-link - ENDIF -rot 2drop ;                                                                                          \  BEGIN @ dup WHILE dup n-link - 2- nfa count 31 and           \   dup r > IF drop r ENDIF 2r t= 0= UNTIL                       ( kt-plan, summen-&saldenbilanz                         ( 49                                                                                                           safe!   ;s                                                                              : mon$ dup 1 13 within? IF 52 msg@ -dup                            0= IF rot 0= ENDIF dup IF drop rot 3 * 3- m+ 3 ENDIF           ELSE drop 51 msg@ ENDIF ;                                                                                                     : j-lines screen to-work flen lin-l m/ sdrop \ max. zeilen(89     () dup 1- lin umin is lin lin jline -jlin                       lin b/scr over jline -lin 0= IF - b/scr ENDIF                   bounds DO i jline drop LOOP ;                                                                                                 : jline () lin-l b/buf */mod dr0 block + ;     \ zeilenadresse  : >sc dr0 editor (loc) sc @ sm rvoc ! lin () lin>r# in>w ;                                                                       ( diverse erg€nzend zur auswertung                      ( 50     only forth also qdos also bh also definitions also                    -forget klasse if-found klasse ;s                                                                                        0  constant klasse                     \ zur auswertung         0  constant p>c  0 constant p>d        \ -- pfa ( sammelkonten                                                                 : j-lines screen to-work flen lin-l m/ sdrop ; \ max. zeilen(89 : jline lin-l b/buf */mod dr0 block + ;        \ zeilenadresse  : lin>r# b/scr /mod scr ! c/l * r# ! ;  ( lin - (zum editieren  : >sc dr0 editor (loc) sc @ sm rvoc ! lin lin>r# in>w ;                                                                         : mon$ dup 1 13 within? IF 52 msg@ -dup 0= IF rot 0= ENDIF \ 49:  dup 0= -EXIT drop rot 3* 3- m+ 3 ;S ENDIF drop 51 msg@ ;      : .mon$ mon mon$ type-l {' emit jar 0 <# # # #> type space ;                                                            -->      ( diverse erg€nzend zur auswertung )                    ( 51                                                                   : 'ndis r+                              \ verdeckte operationen   dis pse 2>r 0. is dis is pse execute 2r> is pse is dis ;                                                                      : spaces curdis spaces ;                                        : ospc out @ - spaces ;                                         : ?kb dup dup 0= -EXIT k-bch + c@ ; \ pfa -- pfa f ( kto benutzt: t-tog fbuf 1- dup @ >< swap ! ;                               : .kms count {1 {9+ within? >rr - 5 r> + type ;                                                                                 : mon> not > ;           ( zeitraum  -:ab +:= >12:von.lo-bis.hi : >mon< dup 12 > IF >|< 1+ within? ;S ENDIF d0= ;               : mon= 2+ @ $0f0f and >|< 10* + >rr mon = -dup     ( ptr - flg    0= IF r mon dup sgn 1+ case: mon> sdrop >mon< ; ENDIF rdrop ;  -->  \ auswertungsperiode: mon = anfangsmonat + endmonat * 256  ( cons & vari zur bilanz (                              ( 42                                                                   : strich wid swap emit-m cr ;                                   : [t] space .id space .mon$ cr {- strich ;                      : .t cr [t] ;                                                   : [titel] latest [compile] literal compile .t ; immediate                                                                       0.  2variable s-sum                         ( klassensumme                                                                      0.  2variable s-g&v                         ( g&v-kto vorl€ufig case: c-g&v #0 #0 #0 #1 #1 #0 #0 #0 #1 #0 ; ( klassen 3 4 8     0.  2variable s-roh                         ( rohgewinn         case: c-roh #0 #0 #0 #1 #0 #0 #0 #0 #1 #0 ; ( klassen 3 8       0.  2variable s-erg                         ( betriebsergebnis  case: c-erg #0 #0 #1 #1 #1 #0 #0 #1 #1 #0 ; ( klassen 2 3 4 7 8                                                         -->      ( fetch & print values                                  ( 43                                                                   : betrag dup -rot dabs 0. s-scl 0    ( dn -- dn.rund )            uq/mod 2swap drop 4 > m+ rot d+- ;                            : betrag# betrag rot d+- dup         ( s/h dn -- dn$              -rot dabs <# sign # # {, hold #s #> sdrop btr-l                 2dup < IF swap DO bl hold LOOP ELSE 2drop ENDIF 0. #> ;                                                                       : #upz abs 0 <# # {% hold # {, hold #s #> 1- ; ( nn -- ptr cnt(%: upz# k-ust + @ dup 0= -EXIT #upz ; ( pfa -- ptr c | f (ust%.$                                                                 : -a/p 2+ dup 2- k-a/p +                                          c@ c->s dup 0= or 2* (s/h) 0= -EXIT abs ;             -->                                                                     : betrag# betrag rot d+- dup 0< case: #32 {- ;  ( s/h dn -- dn$)  -rot dabs <# rot hold # # {, hold #s #> sdrop btr-l            ( acc. data )                                           ( 44                                                                   : @soll -a/p - 2@ ;     : @haben -a/p + 2@ ;       ( pfa -- dn ): @saldo dup @soll rot @haben d- 2dup s-sum 2+! ;  ( pfa - dn   : .betrag betrag# type ;              ( ap dn -(betrag schreiben: .cbetrag 1 -rot .betrag space ;     ( dn --( cashflow-betrag                                                                  : .saldo s/h swap @saldo .betrag ;    ( pfa - (sld)             : .haben s/h swap @haben .betrag ;    ( pfa --( haben schreiben : .soll s/h swap @soll .betrag ;      ( pfa --( soll schreiben                                                                  : (kto)                               ( dn -- ptr len (kto$       over 10000 / case: #32 {K {L ; >r <# # # # # r> hold #> ;     : kto# k-disp + 2@ (kto) ;            ( pfa -- ptr len (kto$                                                            -->                                                                      ( kt-plan, summen-&saldenbilanz                         ( 45                                                                   : .kto# kto# type space ;       ( pfa -- ( print konto-nr.                                                                      : .kto$ out @ nam-l +           ( pfa -- ( print kt-name/u-satz   sdup cfa nfa width @ >rr [ nam-l dat-l - 1- ] literal           >rr min over c@ $1f and min r> over- >r                         width ! .id r> spaces r> width ! upz# -dup                      IF dat-l over- spaces type ENDIF ospc ;                       : .ktn dup .kto# .kto$ ;        ( pfa -- ( print kto.nr. & name                                                                 : .KONTO -dup                   ( pfa -- ( alle konto-angaben     0= -EXIT dup 2dup .ktn .soll .haben .saldo ;                                                                                  : kt-clr 0 over k-bch + c! k-cell erase ; ( pfa -- (kto l„schenkt-plan, summen-&saldenbilanz                         ( 57                                                                   : .kpn out @ width @ [ kto-l 4+ ]       ( nummer, name, a/p       literal ++ over dup .kto# ( 2-) nfa .id ospc                    10 over upz# -dup IF >r swap 4- r - spaces r> type 4 ENDIF      spaces k-a/p + c@ 1+ case: {P #217 {A ; emit ;                                                                                : 'addk klasse 1abs dup 9 >                                       IF drop 1 ENDIF r+ execute IF >r 2dup r 2+! r> ENDIF drop ;                                                                   : .ksum btr-l spaces klasse 1abs dup 10 /                         dup case: 12 71 72 #0 ; .msg 0= IF dup . ENDIF space            btr-l 2* 4- swap 9 > - {. emit-m 3 spaces                       (a/p) s-sum 2@ fdup .betrag rot d+-                             s-g&v 'addk c-g&v s-roh 'addk c-roh s-erg 'addk c-erg 2drop ;                                                         -->      ( kt-plan, summen-&saldenbilanz                         ( 58                                                                   : .sskto -dup           ( klasse kfa -( benutztes kto schreiben   IF klasse 0< >r                                                  dup lit+ [ k-disp 2+ ] literal @ 1000 /                         dup 9 > IF 10 / 10* ENDIF    ( debitoren & creditoren           dup klasse 1abs -                                               IF dup r                                                         IF .ksum cr not s-sum 2off ENDIF is klasse cr                  ENDIF drop  r IF                                                 ?kb dup is dis IF dup .konto ENDIF r                            IF dup k-link + @                                               0= IF cr r is dis .ksum s-sum 2off ENDIF ENDIF                 ELSE 1 is dis .kpn 1 ENDIF                                     rdrop drop ENDIF ;                                    -->                                                                      ( kt-plan, saldenliste, l„schen                         ( 59                                                                   \      ( klasse (pl) (ls) (ll) dis -- listenausgabe --          : lis-go dis ' (ll) @ 2>r ' (ls) @ ' (pl) @ 2>r                   is dis is (ll) is (ls) is (pl) is klasse                        in>w liste 2r> ' (pl) ! ' (ls) ! 2r> ' (ll) ! is dis ;                                                                        : kt-neu 1 is lin pse 0 is pse                 ( summen l„schen   0 ' noop ' kt-clr ' #konten 0 lis-go is pse ;                                                                                 : 'rgbn cr btr-l spaces                        ( msg ptr --       out @ lit+ [ btr-l 3* 1+ ] literal                              rot .msg 2 spaces {. emit {( emit                               r+ >r 10 #0 DO i j execute IF i . ENDIF LOOP rdrop              bs {) emit out @ - {. emit-m 3 spaces 2@ .cbetrag ;                                                                   -->      ( ss-bilanz kt-plan )  bh-menu definitions              ( 60                                                                   : Saldenliste bh s-g&v 2off s-roh 2off s-erg 2off s-sum 2off      [titel] -1 ' noop ' .sskto ' #konten 1 lis-go                   13 s-g&v 'rgbn c-g&v                                            14 s-roh 'rgbn c-roh 15 s-erg 'rgbn c-erg [ ' cmc off ] ;                                                                     : Kontenplan bh [titel]                                           0 ' noop ' .sskto ' #konten 1 lis-go ; ( konten nummernweise  : Kontenliste bh [titel]                                          0 ' noop ' .kpn ' $konten 1 lis-go ;   ( nach namen sortiert                                                                                          forth definitions                       : .K>NAME bh dup 0 (kto) type space      ( nr. -- (konto suchen   -konto -dup IF .konto ;S ENDIF 16 .msg ;                                                                              -->      (                                                       ( 61                                                           -->                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ( remove virtual workmem. ) bh definitions decimal      ( 62                                                                   : mem-close mem-ch 2- 0> mem-ch -window 0= and          ( --      IF file ch-id mem-lk d= mem-ch close                            IF file close dat delet ENDIF ENDIF ;                                                                                         : mem-remv mem-lk 0> IF bhmem heap-rmv ENDIF drop ;                                                                                                     forth definitions                       : MEM-OFF bh mem-fl 1+                \ arbeitsspeicher aufl„sen  case: mem-remv bell mem-close ; -1. is mem-lk ' mem-fl off ;                                                  -->                                                                             : mem-close mem-ch -window mem-ch 3- 0< or -EXIT        ( --      file ch-id mem-lk d= mem-ch close                             : mem-close mem-ch -window -EXIT mem-ch 2- 0>           ( --     ( clear heapmem. ) bh definitions decimal               ( 63                                                                   : ?merr swap IF mem-off dup ?error ENDIF drop ;                                                                                 \ ( d.disp --) speicherbereich ab abstand zum anfang l„schen    : mem-mclr bhmem k-len 2dup                                       bhmem d16- 2@l d16- d< -3 ?error                                2rot 2dup dminus 2rot d+ 2dup dminus d0<                        IF pad dup base+ 2>r b/alc >rr erase 2>r d+ 2r>                  ENTER BEGIN                                                      2swap 2dup r m+ rp@ 2+ 2@ 2rot r cmove-l 2swap                  ENTRY r minus m+ 2dup d1- d0<                                  UNTIL r> m+ 2r> 2rot 2rot 6 ndup drop cmove-l                  ENDIF 2drop 4drop ;                                   -->                                                                     \  -m/hed dup bhmem rot m+ 2@l rot m+ d< -3 ?error               ( clear file / virtual memory                           ( 64                                                                    ( d.fpos --( datenfile ab fpos l„schen, abort bei filefehler ) : mem-fclr mem-lk set-work posab ernum                            IF sdrop dup -1 < eof 0= and swap ENDIF ?merr                   pad b/alc 2dup erase 2dup b/hed - sstrg fsflush                 k-len b/alc m/ swap 0> + 0                                      DO 2dup sstrg LOOP dup ?merr fsflush 2drop ;                                                                                   ( d.pos --( virtuellen datenspeicher ab rel. adresse l„schen ) : mem-clear                                                       2 ?depth mem-fl 1+ case: mem-mclr 2drop mem-fclr ; ;                                                                                                                                  -->                                                                                                                                      ( open [new] filemem.                                   ( 65                                                                   \ leeres datenfile mit k-len auf diskblock-l€nge aufgerundet    : mem-file mem-ch is-ochan dup                  ( -- ernum:       IF mem-close ENDIF mem-ch 4- 0< or            ( -ve error       IF new-chan is mem-ch ENDIF                   ( +ve owner       dat 0 mem-ch open                                               IF drop dat 2 mem-ch open drop ENDIF                            mem-ch ch-id is mem-lk dup dup 0= is mem-fl ?merr               mem-ch dup file to-chan to-work (file) f/n dat !name            flen k-len d<                                                   IF offset dup @ >r >r dr1 editor f-xinf a/fre b/alc s*           k-len b/hed m+ flen d- b/alc m+ d< -11 2r> ! ?merr             ENDIF 0. mem-fclr ;                                   -->                                                                                                                                      ( new/clear virtual memory                              ( 66                                                                   : MEM-CLR 0. mem-clear ;                  \ arbeitsdaten l„schen                                                                : MEM-ON mem-lk d0< mem-fl 0= and         \ arbeitsspeicher       IF free -4096 m+ k-len d- d0<           \ einrichten             IF mem-file 1                          \ 1:file                 ELSE bhmem is mem-lk -1 ENDIF          \ -1:heap               ELSE mem-lk dminus d0<                  \ link >0                IF mem-fl ELSE 0 ENDIF                 \  0:fehler             ENDIF is mem-fl ;                               -->                                                                                                                                                                                                                                                                                                                                            ( interpreteraufruf: fehlendes konto nachtragen )       ( 67           also editor also hidden also also       0 is db-on      : x-konto                                 \ ( kt.nummer - pfa )   dup -konto dup IF sdrop ;S ENDIF        \ gefunden oder:        cr 4>col 2 .msg 2dup d. 1 .msg eli .    \ fehler anzeigen       >in >tib tib@ tib-max erase             \ tib umsetzen+leer     <# bl hold # # # # # # bl hold #>       \ 6stellige nummer      swap 2- sover !                         \ als w-string          tib@ over +text                         \ nummer ‡bergeben      tib@ 2dup "  konto  " +text             \ definitionswort       {| swap 2+ c! swap 2dup +text +text     \ name f‡r def.                ocontext @ >r kvoc>> 2 tib       \ passendes vokabular   dup @ count-w + off +! interpret        \ aufruf                voc>> r> ocontext ! in>> ;              \ vokabulare zur‡ck                                0 is db-on   \ und tib mit in              previous previous previous previous    -->              ( ust zwischenspeicherung                                ( 68                                                                   10 k-cell 2array ust   ( ust s & h netto & brutto lfd. buchungen10 1 2array u%         ( steuers€tze zu den codes 0 bis 9                                                                        0. 2variable kbl-s    ( summen im                               0. 2variable kbl-h    (   kontenblatt                           0. 2variable kbl-n    ( netto und                               0. 2variable kbl-b    ( brutto bei mwst                                                                                            defer vl           ( auswertung f‡r                          0. 2constant vp       ( programmierende eingabe                kto constant (kt)      ( vorgabe f‡r kontierung                                                                         -->                                                                                                                                     ( ust ausgabe                                            ( 69                                                                   : c-ust 0 ust 2- @ 2* 10.                ( buchung vorbereiten    DO i u>konto -dup                                                IF dup dup k-cell erase k-bch + 1off                            k-ust + @ i u% ! i ust over erase ENDIF                        LOOP drop ;                                                                                                                   : b-ust 10.                              ( steuern ‡bertragen     DO i ust 4@ 4dup or or or i u>konto dup rot and                  0= IF 5 ndrop ELSE >rr 4! r> k-bch + 1on ENDIF                 LOOP ;                                                                                                                -->     \  DO i ust dup 2@ rot 4+ 2@                                    \   4dup or or or i u>konto dup rot and                         \   0= IF 5 ndrop ELSE >rr 4+ 2! r 2! r> k-bch + 1on ENDIF       ( ust, konten nach kurznamen                            ( 70                                                                    ( holt die basis einer kontendefinition : NAME>KTO {kurzname} ) ( f‡r eingabe der ersten 4 zeichen statt namentlichen aufrufs ): NAME>KTO ?exec                        ( -- pfa | abort          [compile] name -count over + bl swap c!                         m-msk 6 blanks kmsk dup 1- 0. rot convert                       sdrop rot = swap -konto sover 0= or dup ?errorzeilenweise (                                         ( 71                                                                                    ( vorg€ngerzeile holen / neue zeile eintragen ): f-lin pvl jline [ o-lin 2+ ] literal lin-l cmove ;            : s-lin [ n-lin 2+ ] literal lin jline lin-l cmove update ;                                                                     : b-lin pvl is lin pvl 1- 0< -EXIT      \ neuen vorg€nger suchen  0 pvl 1- DO i is pvl i jline -cmt sdrop -leave -1 +LOOP ;                                                                     : c-lin lin-l over ! 2+ lin-l blanks ;  \ adr) mem-zeile l„schen: c-blk jline lin-l blanks update ;     \ nr.) jur-zeile l„schenn-lin c-lin o-lin c-lin                 \ arbeitszeilen leer                                                                    : +lnr + wid 5- < 5* ;                                          : +pos over +lnr + >col ;     --> ( pos min.rest -- (zur eingabe                                                                 ( zeilenweise (                                         ( 72                                                                   : kd count emit count emit {. emit ;    \ datum zusammensetzen  : .kd kd kd kd bs space ;               \ datum schreiben                                                                       : .lin >r lin-l wid btr-l 0 +lnr -dup            ( ptr nr --      IF r 4 .r space - ENDIF rdrop                  ( journalzeile   2dup - 0< >r min type r> IF space ENDIF clrt ; ( & nr drucken : .o-lin [ o-lin 2+ ] literal pvl .lin ;         \ vorige zeile : .n-lin [ n-lin 2+ ] literal lin .lin ;         \ lfd. zeile   : ?olin o-lin 2+ -cmt -dup sdrop ;         ( -- ff | ptr tf (alt                                                                : 'mlin in>w o> out-cons dup xstrip   ( alte & neue & menu-zeile  .o-lin xstrip clrt k> .n-lin r+ execute p> clrt p> ;          : #mlin 'mlin nm [ 0 is cmc ] ;                                 : tm nm pvl #. ;                                        -->      ( datum schreiben                                       ( 73                                                                   h] >r rot dup @ 2swap           \ pad+ vari min max --            wraps dup rot ! 0 <# r IF r hold ENDIF # # #> \ zahl nach pad+  rdrop pad dup @ -rot 2dup +! rot + 2+ swap cmove h;  dup dup  : dat# >r pad off               \ datum zusammenstellen           ' tag 1 31 r h, ' mon 1 12 r h,                                 ' jar 0 99 r> h, pad -count ;                                 : .dat {. dat# type ;           \ datum anzeigen                                                                                : drf cls editor l rvoc 17 #mlin ; \ bild erneuern              h] dr0 editor flush rvoc in>w r+ execute -1. ?error h;  dup     : ded p-off dr0 bh pvl lin>r# h, edit ; \ editieren             : dqt -1 is mon h, c ;       -->  \ buchen beenden                                                                                                                                               ( datum eingeben/lesen                                  ( 74                                                                   associative: >da -27  27  {H   {h  252 244  {Z  {z ;            editor case: >dc ded dqt help help ptr drf noop noop noop ; rvoc                                                                : >DATUM in>w 17 #mlin date$ type p> \ datum eingeben: Cursor     11 spaces BEGIN p> .dat c-key key dup >da >dc                    associative: #10 216 208 217 209 218 210 #0 ;                  -dup WHILE dup \ : ¿   ¾   a¿  a¾  c¿  c¾                               case: #0  #1  #-1  #1 #-1  #1 #-1 #0 ; -dup             IF swap case: #0  tag tag mon mon jar jar #0 ; -dup             IF sover 2+ +! ENDIF ENDIF drop REPEAT ;                                                                                      : o-dat ?olin IF 0. rot 1- convert drop decimal                  #100 m/mod #100 m/mod #100 m/ drop is tag is mon is jar ENDIF ;: i-dat 0 dat# n-lin 2+ swap cmove ;                    -->      ( buchungstext                                          ( 75                                                                   : .txt txt-p txt-l +pos txt -print ;                            : o-txt txt-l txt !                                               [ o-lin txt-p + 2+ ] literal [ txt 2+ ] literal txt-l cmove ; : i-txt n-lin txt-p over ! txt +text ;                          : >TEXT 18 'mlin tm txt-p 5- txt-l +pos 19 .msg pad dup off       txt-l 2dup txt !name over dup count-w -trailing sdrop swap !    c-key edline drop 1- @ dup $0101 <                              swap [ $0100 {K or ] literal = minus or -dup                    IF 0< IF f-lin pvl c-blk b-lin ENDIF o-txt ;S ENDIF             txt txt-l pad !name ;                                                                                                         : .avoc cr 67 .msg cr vlist ;   -->      \ aktuelles vocabular                                                                                                                                   ( interpreter zahleneingabe                            ( 76                                                                    : (val) bell csp! tib-max                  \ terminal-eingabe     tib@ swap 2dup erase 2- vp at c-key 2- expect in off vl ;     : (fval) decimal voc>> [compile] fp (val) voc>> ;               : vval o> clrbt 59 .msg clrt [compile] fp .avoc 3 m-cr ;        : rval p'dis vval (fval) ;                                      : val-in >error< ' rval is error editor    \ eingabe              ' interpret is vl >tib >in !csp pos is vp (fval) >error<        csp @ sp@ 2+ - 2/ case: btr>f s>f d>f noop ;                    -6 csp +! csp! in>> decimal ;                         -->                                                                     zahleneingabe, variablendeklaration, -aufruf, rechnen mit (val).vorher muœ csp z.b. mit !csp gesetzt werden. zur‡ckgegeben wird aus val-in stets eine f.p.-zahl, hier sind alle forth-eingaben  m„glich, auch die deklaration von variablen/constanten           ( buchungsbetrag, programmierung                       ( 77                                                                    : ?b-ovf 0= -EXIT 21 mlin \. btr -1 ' lin +! ;                                                                                  : btr# s/h btr betrag# ;                                        : .btr btr-p btr-l +pos s/h btr .betrag ;                                                                                       : >BETRAG 20 #mlin 60 .msg val-in       \ f.p.-eingabe & rechnen  fp f-scl * rvoc b-ovf ?b-ovf rvoc f>d is btr ;                                                                                \ ganze zeile ‡bernehmen; zur eingabe beim datum statt <enter>  : ze editor p> 65 .msg (s#) rvoc                                  -dup 0= -EXIT jline o-lin 2+ lin-l cmove ;                            {Z >da ' ze is >dc {z >da ' ze is >dc           -->                                                                                                                                      ( b.-betrag lesen                                      ( 78                                                                    : ?berr 0= -EXIT erlin csp! \0 ;                                                                                                : (fbtr) btr-p + pad sover 1+ btr-l cmove       ( vari ptr --     dup btr-l + bl sdup c@ >r c! 1+ bl enclose 2drop + 1-           btr-l over c! sp@ 2+ csp !                                      voc>> [compile] fp decimal                                      also hidden [number] previous voc>> ?berr                       r> {- = minus also fp +- f-scl * previous f>d rot 2! ;                                                                        : o-btr ?olin 0= -EXIT pvl is eli ' btr swap (fbtr) ;           : i-btr n-lin btr-p over !                                        1 btr betrag# btr-l min swap 2- sover ! +text ;       -->                                                                                                                                      ( s/h )                                                ( 79                                                                    case: $s/h {H {S 217 ;                                          : -s/h bl or associative: {h #0 {s {0 ; 1- ;                    : .s/h s/h-p 1 +pos s/h $s/h emit ;    ( h:-1 s:1 0:2 <bl>,+/-:3                                                                : >S/H 3 (a/p) IF drop 54 #mlin BEGIN p>                          s/h-p 1- 1 +pos ." > " bs c-key key dup emit dup 10 =           IF drop {0 ENDIF -s/h -dup UNTIL ENDIF is s/h ;                                                                               : fs/h s/h-p + c@ -s/h is s/h ;         ( ptr --( set cons s/h  : o-s/h ?olin 0= -EXIT fs/h ;                                   : i-s/h s/h $s/h s/h-p 2+ n-lin 2dup ! + c! ;                                                                           -->                                                                                                                                      ( ust-codierung                                        ( 80                                                                    : .upz u>konto dup IF k-ust + @ ENDIF #upz 1- type ;            : [%] dup ." [" . bs {/ emit 5+ . bs {] emit ;                                                                                  : u/v-m nul-m wid lin-l 8+ >                                      IF 22 .msg ENDIF 23 .msg u/v dup .upz 4 >                       case: {V {M ; emit 5 0 DO space i [%] i .upz LOOP ;                                                                           : .ust u/v-p 1 +pos u/v . ;                                                                                                     case:        cde>u  {0 {1 {2 {3 {4 {5 {6 {7 {8 {9 #32 ;         associative: u>cde  {0 {1 {2 {3 {4 {5 {6 {7 {8 {9 #32 #10 ;                                                             -->                                                                                                                                      ( ust-codierung                                        ( 81                                                                    : ocd drop u/v lit+ {0 1 ;              ( alter code            : ncd drop 0 ;                          ( ung‡ltige eingabe                                                                     : >U/V 'mlin u/v-m                      ( ust-codierung eingeben  BEGIN bell p> u/v-p 1- 1 +pos ." > " bs c-key key                dup u>cde range: #0 11 12 ; case: ncd 1 ocd ncd ;              UNTIL u>cde 10 umin is u/v ;                                                                                                  : fu/v u/v-p + c@ u>cde is u/v ;        ( ptr --( u/v code holen: o-u/v ?olin IF fu/v ENDIF ;           ( -- (u/v alt => vorgabe: i-u/v u/v cde>u u/v-p n-lin 2dup ! + 2+ c! ;       ( u/v neu                                                  -->                                                                                                                                              ( gegen-/konto eingabe                                 ( 82                                                                    : kto-m 24 mlin ;                                               : .kto kto-p kto-l +pos kto 0 (kto) type ;                                                                                      : k>n dup c@ bl or              ( ptr -- ptr (k/l/bl nach ziffer  associative: {k {l {1 {2 ;                                      case:        {1 {2 {1 {2 {0 ; over c! ;                                                                                       : kto-in csp!                   ( --                              ikm pad 1+ @ [ $0100 {K or ] literal -                          IF dup j-flg drop     ( msk - msk flg tab0/5 (joker              IF drop (kt) ELSE 1- number drop ENDIF       \ vorgabe o. Nr   ELSE drop lin minus dup is lin is pvl (kt) ENDIF      \ "K"     [ c-num k-num + ] literal over u< dup ?error ;                                                                        -->      ( gegen-/konto prog. eingabe                           ( 83                                                                    : (konto) 24 #mlin 5- kto-l +pos emit dup @ dup is (kt)           -1 dpl ! #imsk k-msk m>m 25 .msg !csp kto-in swap ! ;                                                                         : >KONTO  ' kto bl kto-p (konto) ;                              : >GKONTO ' gkt {G gkt-p (konto) ;                                                                                              : (fkto) >r 0. pad 1+ r> over kto-l   ( vari sptr --(num to vari  2dup 2+ blanks cmove k>n 1- convert 2drop swap ! ;                                                                            : (okto) ?olin IF + (fkto) ;S ENDIF 2drop ;                     : o-kto ' kto kto-p (okto) ;            ( vorige kto-eintragung : o-gkt ' gkt gkt-p (okto) ;            ( dto., gkt                                                                     -->                                                                      ( konten bearbeiten                                     ( 84                                                                   : (ikto)               \ val disp -- ( neu eintragen              n-lin sover ! swap 0 (kto) swap 2- dup -rot ! +text ;         : i-kto kto kto-p (ikto) ;                                      : i-gkt gkt gkt-p (ikto) ;                                                                                                      : >jar lin 1 DO i jline -cmt IF 4+ count $f and 10*               swap c@ $f and + dup dup is jar -leave ENDIF drop LOOP ;                                         also assembler               create fadr $201d , $80ee , ' b/buf , $4840 , $2b00 ,             $45fa , 6 , $4eee , [docol] , ] dr1 block update [              here 2+ , here 2+ , [dosemis] 2@ , ,                            $204e , $d0dd , $d0dd , $2b08 , $4ed3 , smudge                                                         previous       -->                                                                      ( auswertung - vari ) forth definitions                 ( 85                                                                        bh definitions   \ saldieren und kontenbl€tter:              defer fbv           \        --         ( vorbereitend          defer fba           \        --         ( abschlieœend          defer ?sel          \ p n    -- p n f   ( auswahlkriterium      defer ?kto          \ ptr nr -- p n f   ( konto passt, tf:=1    defer ?gkt          \ ptr nr -- p n f   ( gegenkonto,  tf:=2    defer ?txt          \ ptr nr -- p n f   ( textauswahl, tf:=3    defer ?kand         \ p n f  -- p n f f ( AND-zusatz,  tf:=/=0  defer ?kor          \ p n f  -- p n f f ( OR-zusatz, tf:=1,2,3  defer ?mon          \ p n f  -- p n f f ( monatsausw., tf:=/=0                                                                  defer jback         \        --         ( backup turnusm€œig   20 dup 2constant bks \                   ( backup-stufung - 1                                                          -->      ( journal aufarbeiten )                                 ( 86                                                                   : madr mem-lk d+ ;                    ( d1 - d2 ( adresse im ram: m-kto k-cell m* mem-fl 1+ case: madr ende fadr ; ; ( kto d.adr                                                                : bkto + >r 0 sp@ r> (fkto) ;         ( ptr disp -- kto.nr                                                                      : bnu >rr 2dup          \ d.brutto -- d.brutto d.netto d.ust      2dup dabs 100,00 2dup u/v u% @ m+ 2dup d0=    \ ? nur steuer    IF 2sdrop ELSE ud*/mod ENDIF 2sdrop r> d+- 2swap 2over d- ;                                                                   : nbtr                  \ ptr - d.brutto d.netto d.ust            >rr fu/v r fs/h 0. sp@ r> (fbtr) bnu ;                                                                                -->                                                                     \ : fadr b/buf um/mod dr1 block + update base+ ;  ( im datenfile ( summenbuchungen                                       ( 87                                                                   : m-val >rr             \ lfd zeile buchen ( ptr -- (ret mit dr1  nbtr s/h 0> 4* u/v                   \ d.brt d.net d.st -- b n  ust + >rr 2+! 2over r> 8+ 2+!        \ steuer & bruttobetrag     r gkt-p bkto m-kto s/h 0> 4* dup                               r> 2>r m+ 2+!l                       \ netto auf gkt            r> kto-p bkto m-kto r> 4 xor m+ 2+!l ;        \ brutto auf kto                                                                : -sld over + 0 sp@ 2+ rot (fkto) dup x-konto >r \ ptr disp --    m-kto 4@l r 4! r> k-bch + 1on ;                                                                                               : >m-val                \ ptr -- ptr ( salden ‡bertragen          dup m-val kto-p -sld gkt-p -sld dr0 ;                 -->                                                                                                                                     ( zur auswertung                                         ( 88                                                                   : -jlin swap -cmt                 \ blk nr -- ptr nr f (typ       IF t-lin sover lin-l cmove 1    \ f: 0:leer 1:journal 2+:text   ELSE c/l -trailing 2* ENDIF >r swap r> ;                                                                                      : jdsp dis pon 0< or              \ ptr nr -- p n ( schreiben     IF cr bot? drop 2dup .lin dup lin>r# ENDIF ;                                                                                  : jval >rr is pvl                 \ ptr nr -- p n ( saldieren     syn IF r is eli >m-val ENDIF r> ;                             : jsld dup                        \ ptr nr -- p n(zeile & saldo   ?sel sdrop IF jdsp jval ENDIF ; \ ggf monatsweise                                                                              case: jsel bell jsld jdsp ;   \ ptr nr c - p n (c: 1 jur >1 cmt                                                        -->     ( erste freie zeile, liste, auswertung                   ( 89                                                                   : fb dr0 fbv j-lines dup 1- lin umin is lin     \ liste begrenzn  dup b/scr - lin umin                          \ probelesen      b/scr bounds DO i jline drop LOOP             \ eine seite      w#0 dis -cr syn >rr mem-fl 0=/= minus         \ ?drucken        and is syn 0 over lin + lin                   \ & auswerten     DO drop i 2dup <                                                 IF over- ENDIF jline i -jlin -dup 0= ?esc or                    IF leave ELSE jsel ENDIF sdrop               \ lin - schluœ    LOOP sdrop dr0 dr>w dup b/scr + lin-l u* posab drop eof         IF work 1scr dr>w dup block drop ENDIF                          is lin fba in>w r> is syn ;                safe! ;s                                                                           : fb dr0 fbv j-lines () dup 1- lin umin is lin  \ liste begrenzn  () is lin fba in>w r> is syn ;                safe! ;s         ( programmteile - backup                                ( 90      only forth also qdos also bh also definitions also decimal           -forget (bkb) if-found (bkb) ;s                                                                                         : (jbk) 2>rr count-w rot count-w  \ von nach -- f ( tf: copieren        editor match rvoc drop 0= \ wenn zielname angegeben und         r> dup pad f/n cmove @ 5 >             \ quelle =/= ziel        r> dup pad 80 + f/n cmove @ 5 > and and ;               : (bkb)                                                           jur jbk (jbk) p'dis -bup jbk p'dis -print [ ' cmc off ] ;             ' (bkb) is jback                                                                                                        : ks-off                                \ zwischensummen l„schen  kbl-s 2off kbl-h 2off kbl-b 2off kbl-n 2off ;                                                                         -->                                                                      ( personenkonten einreihen )                            ( 91                                                                   : int >rr dabs 1000 m/mod rot drop 1000 s* r> d+- ;                                                                             : dcs ?kb 0= IF drop ;S ENDIF   ( disp link kfa || x bot -- d l   4@ swap rp@ 2+ @ 10000 / case: 0 p>d p>c 0 ;      \ in 'ksaldo  -dup IF dup 2swap rot 4+ 2+! 2+! ;S ENDIF 4drop ;                                                                                                                                     -->                                                                                                                                                                                                     : #kn 2dup = IF #konten ;S ENDIF drop ; ( bot num -- bot \ in kb                                                                  ELSE dup 2@ rot 4+ 2@ rp@ 2+ @ 10000 / case: 0 p>d p>c 0 ;      -dup IF dup 2swap rot 4+ 2+! 2+! ELSE 4drop ENDIF ENDIF ;      ( masken- & ust-konten-detektor )                       ( 92                                                                   : ?jo -1 is (joker) g-msk dup {0 pad c!  \ genauer vergleich      joker dup >< or dup pad 1+ 2! 5 pad w= \ 2. maske war <nl>      IF k-msk g-msk m>m ENDIF               \ dann gleichsetzen      5 k-msk w= dup 0= dup is jm 5* is j5   \ ? beide ktn schreiben  k-msk j-flg j5 or is j5 is jk          \ ? kontengruppe oder    IF 0 is jg ELSE g-msk j-flg j5 or is j5 is jg ENDIF             joker is (joker) ; \ jm=1 beide ungleich, jk/jg=1 kto/gkt grp.                                                                : ?uv                                    \ msk - ukt a/p pfa | 0  1- 0. rot convert 2drop dup is kto -konto >rr                   IF r (a/p) dup IF drop dup k-a/p + c@ ENDIF >r -dup             IF nfa 1+ count {| =/= over 1+ c@ {. = and swap                   2+ c@ dup {0 {9+ within? rot and 0= IF drop 0 ENDIF r>        ELSE rdrop 0 >r ENDIF ENDIF r> ;                      -->      ( maskendetektor )                                      ( 93                                                                   : ql -rot + pad m>m pad k>n 5 rot w= ;     ( ptr disp msk -- f                                                                  : qg >r dup IF >r over u/v-p + c@ r> = ENDIF                      -dup 0= IF over gkt-p r ql ENDIF rdrop ;                                                                                      : qkt over kto-p k-msk ql    ( blk nr -- b n f ( 1: kto passt     -dup -EXIT uk k-msk qg 2* ;                                                                                                   : qgk ug g-msk qg 2*         ( blk nr -- b n f ( 2: gkt passt     -dup -EXIT over kto-p g-msk ql ;                                                                                -->                                                                                                                                                                                                            ( maskendecodierung )   -->                             ( 94                                                                   maske           journal         code    jm   jk   jg   uk   ug                          flags:          k=g   joker    ust-kto  kto             kto             1       x                       kto             gkt             2       x                       kto             ust             2       x              chr      kto & gkt       gkt & ust       3       1              0    chr                                                                 gkt             gkt             2       x                       gkt             kto             1       x                       gkt             ust             2       x                   chr gkt & kto       gkt & ust       3       1              chr  0                                                                   kto/gkt  beide  gkt/kto         3       1                       gruppe gefunden aus ?bkt mit    3       x    x    x    x    x    ( bedingte auswahl                                      ( 95                                                                   : qtx fbuf? 0= -dup -EXIT       ( p n f - p n f f ( =/= 0 txt     over txt-p + txt-l fbuf count editor match drop ;                                                                             : qmo mon 0= -dup               ( p n f - p n f f ( tf:=-1        0= IF 2 pick mon= ENDIF minus ; ( AND-zusatz f. monatsauswertu                                                                : qmt drop qtx qmo and dup ;  ' qmo dup is ?sel cfa ' ?sel 2+ !                                                                   ' qmo dup is ?mon     dup cfa ' ?mon 2+ !     -1   is mon                 is ?kand    ' 0   is ?kor                                 ' qkt is ?kto     ' qgk is ?gkt           ' qtx is ?txt                                                           -->                                                                                                                                      ( kontendetektor kto & gkt                              ( 96                                                                   : kgu uk ug xor {0 and 0> and or dup 3- IF drop 0 ENDIF ; ( k=g                                                                 : ?bkt ?txt dup IF drop   ( p n - p n & 0:nix 1:kto 2:gkt 3:k&g   ?kto >r ?gkt dup r or swap r> =                                 jm IF over case: drop d0= kgu drop ; ELSE drop ENDIF ?kor       IF -dup 0= IF -1 ENDIF ENDIF ?kand -EXIT drop 0 ENDIF ;                                                                       : ?a/p (s/h) ' (s/h) dup on         ( 0:nix -2:passiv 2:aktiv     m-msk 0 bkto -konto dup IF -a/p sdrop ENDIF is a/p ! ;                                                                        : ?s/h      ( ptr nr -- p n ( s/h ausgabeposition im kontenblatt  over fs/h [ btr-l 1 or 1+ 2/ 1+ dup 1- minus ] dliteral         s/h +- a/p +- k/g 2 =/= 1- +- dup sgn is s/h + spaces ; -->                                                                    ( kontenblatt - kopfzeile                               ( 97                                                                   : kbl-m 0 is ug g-msk ?uv               \ msk f -- f              IF drop is ug ENDIF                                             0 is uk k-msk ?uv >rr                                           IF is a/p is uk ENDIF                                           ks-off cr .fbuf fbuf?                                           IF {, emit space ENDIF jm jk or                                 IF 26 .msg k-msk .kms                                            jm IF 33 .msg g-msk .kms ENDIF       \                          r 0= IF rdrop 1 >r ENDIF                                       ELSE 27 .msg r IF                                                 s/h r .ktn 8 j5 + spaces 28 .msg                                dup a/p +- is s/h r .saldo is s/h                             ELSE r message ENDIF ENDIF                           [ -->                                                                     ( fortsetzung von {kbl-m} zur kopfzeile vom kontenblatt ( 98                                                                    ]                                                                clrt cr {= strich                                               35 .msg                                                         [ btr-p dat-l + 2+ ] literal ospc                               10 .msg j5 spaces ."  U"                                        a/p 0=/= lit+ 55                                                [ btr-l dup 4- ] dliteral spaces                                out @ j5 ++                                                     over .msg                                                       ospc 2+ .msg r> ;                                                                                                     -->                                                                                                                                                                                                      ( kontenblattzeile                                      ( 99                                                                   : kdsp              ( ptr nr -- p n ( kontenblattzeile schreiben  2dup dup is eli 4 .r space dup 2dup   \ datum und               .kd txt-p dat-l - + txt-l type space  \ buchungstext            gkt-p over kto-p jm jk or >rr         \ kontengruppe            0= IF sdrop k/g                       \ oder                    case: sdrop drop sdrop drop ; ENDIF   \ einzeln                 r> -1 DO + kto-l type space LOOP      \ gkt oder beide nummern  u/v-p + 2 type                        \ steuercode              over ?s/h drop                        \ ausgabeposition & s/h                                                       [ -->                                                                                                                                                                                                                                                                      ( kontenblattzeile  (                                   ( 100                                                                   ]                                                                nbtr                                  \ betr€ge holen           uk ug or                              \ ust-konto               IF 2>r kbl-n 2+! kbl-b 2+! 2r> ELSE   \ oder netto/brutto       2drop k/g case: 2sdrop 2drop 2sdrop ; ENDIF                     2dup .cbetrag (joker) >r -1 is (joker)  \ betrag vom kto        2over drop dup kto-p + 5 rot gkt-p + w= \ ? kto = gkt           r> is (joker) >rr                     \ betrag schreiben        IF 2dup 2dup -1 -rot .betrag ENDIF    \ ? kto = gkt             kbl-h kbl-s s/h 0< k/g 1 > xor IF swap ENDIF                    2swap rot 2+! r>                      \ ? beides summieren      IF 2+! 0 ENDIF tag 1+ is tag drop ;   \ zeilen z€hlen                                                                 -->                                                                      ( kontenblatt - summen )                                ( 101                                                                  : .bkt ?bkt -dup IF is k/g cr dup is eli kdsp ENDIF ; ( konten                                                                  : ktsum {- strich 0 tag -dup    \ summen eines kontenblatts       IF dup 4 .r 1 > IF drop 62 ENDIF ELSE 31 .msg ENDIF             32 .msg .msg space .mon$ space                                  k-msk 27 jm jk or 0=/= - .msg                                   jm IF .kms 40 .msg g-msk ENDIF .kms                             [ btr-p 3+ ] literal >rr ospc 34 .msg                           [ s/h-p 4+ ] literal j5 + >rr ospc                              kbl-s 2@ 2dup .cbetrag kbl-h 2@ 2dup .cbetrag                   cr r> r> ospc 28 .msg ospc d- .cbetrag                          in>w pse inkey drop ;                                 -->                                                                                                                                      ( kontenblatt - personenkonten                          ( 102                                                                  : .klin ?kb                             \ kfa -- benutztes kto    IF fbuf? 0= -dup 0=                   \ kontenname bei textmsk   IF dup nfa count 31 and width @ min >rr here -rot bounds         DO i c@ $7f and dup bl > 0= IF $80 or ENDIF over c! 1+ LOOP     here r> fbuf count editor match rvoc drop sdrop                ENDIF IF cr ."  per " eli jline .kd drop                         dup 2dup 2dup [ txt-l 9 + dat-l + ] literal 41 .msg             over .kto$ ospc .kto# 3 spaces .soll space .haben               @soll kbl-s 2+! @haben kbl-h 2+!                              ENDIF ENDIF drop ;                                                                                                    -->                                                                                                                                                                                                      ( kontenblatt ausgeben                                  ( 102                                                                  : #kn 2dup = IF #konten ;S ENDIF drop ; ( bot num -- bot \ in kb                                                                : kb ?jo   \ tabelle gkt-maske gruppen: einzeln, gemischt, beide  1 is lin 1 is dis 0 is tag 0 is pvl syn 1 or is syn kbl-m       IF fb kto credit = 2* kto debit = +                              case: -1 d-num c-num ; 0 ' noop ' .klin ' #kn 0 lis-go drop    ENDIF cr ktsum -1 is (joker) voc>> ;                                                                                          : kl ks-off ?kb dup is dis             \ kfa --) ein kontenblatt  IF dup k-disp + 2@ <# # # # # # #> drop dup m-msk m>m dup       k-msk m>m g-msk m>m 1 is uk cr kb cr ENDIF drop ;                                                                     -->                                                                     : #kn 2dup = IF #konten ELSE drop ENDIF ; ( bot num -- bot \ in  ( personenkonten-umbuchung                              ( 103                                                                  : kxt fbuf 1- @ >< (qfb) IF t-tog ENDIF voc>> ;                 : kx fbuf? IF pos .fbuf 36 mlin                                   editor y/n 0> 0= IF b> clrt t-tog ENDIF at ENDIF ;            : ktx p'dis kx [ ' cmc off ] ;                                                                                          -->     : dc-lin  \ statt s-lin \ -- ( fertige buchungszeile(n) eintra    n-lin 2+ dup kto-p gkt-p d+ dup c@ bl =/=                       IF swap 1 ELSE over c@ bl =/= ENDIF   \ bei personenkonten      IF n-lin o-lin lin-l 2+ cmove         \ umbuchung schreiben      kto gkt or 10000 / case: 0 debit credit 0 ; -dup                IF 0 (kto) bl n-lin u/v-p + 2+ c!                                2>rr rot swap cmove s-lin lin 1+ dup is lin is pvl              o-lin n-lin lin-l 2+ cmove 2r> rot swap cmove                 ELSE 2drop ENDIF ENDIF s-lin ;                                 ( saldieren, kontenbl€tter                              ( 104                                                                  : .b$ 37 .msg .cbetrag ;                                        : .n$ 38 .msg .cbetrag ;                                        : .s$ 39 .msg .cbetrag ;                                                                                                        : usum 4@ 2swap d- 2>rr d+ 2swap 2r> ;                          : upos [ nam-l kto-l btr-l + + 2+ ] literal swap .msg ospc ;                                                                    : u-sing .msg space .mon$ cr {- strich 2>r 0. 0. 2r>              DO i u>konto -dup IF ?kb 0= IF drop ELSE                        .ktn space i ust >rr 8+ usum btr-l spaces .b$ space             r> usum .s$ cr ENDIF ENDIF LOOP                                 {- strich #41 upos .b$ space .s$ cr {= strich ;       -->                                                                     : usum dup 2@ rot 4+ 2@ d- 2>rr d+ 2swap 2r> ;                   ( ust-erkl€rung                                         ( 105  : urkl >r dup u>konto ?kb       \ {dn dn} idx f -- {dn dn}        IF cr .ktn dup is u/v 0 upos ust 8+ 4@ 2swap d- bnu r            IF 2drop 2dup d0=                                                IF 2swap int 2dup ELSE int 2>rr                                  dabs u/v u% @ 0 udm* 100,00 uq/mod 2sdrop r d+- 2r> ENDIF     ELSE 2swap 2dup d0= IF 2drop 2over ENDIF ENDIF                  2>rr .n$ 2>rr .s$ 2rot 2r> d+ 2rot 2r> d+ 2rot                 ENDIF 2drop rdrop ;                                                                                                           : rsum 41 upos 2dup d0=         \ d.steuer d.brutto --            IF 2drop btr-l 7+ spaces ELSE .n$ ENDIF .s$ cr {= strich ;    : uktn >r                                                         0. 0. 2rot DO i j urkl LOOP rdrop 4dup cr {- strich rsum ;                                                            -->       IF cr .ktn dup is u/v 0 upos ust 8+ dup 2@ rot 4+ 2@ d- bnu r  ( saldieren, kontenbl€tter                              ( 106                                                                  : >js ' bell 3. DO i swap is jsel LOOP w#0 ;                    : (kb) ' noop ' .bkt >js ;                                      : 'ksaldo                               \ ab lin neu auswerten    ?p-off >r in-cons dup xstrip 48 .msg xstrip in>w >jar           ' jdsp ' jsld  >js (kc) is k-cell c-ust kt-neu mem-off mem-lk   d0< IF 1 is lin mem-on mem-clr ENDIF 'ndis fb 0 ' noop          ' dcs ' #konten 0 lis-go b-ust default-is ?sel r> ?p-on ;                                                                                             forth bh-menu also definitions          : .KBLATT (kb) ktx #kmsk cr kb kxt ;    \ nr --) kt.blatt                                                               -->                                                                     : >TSALDO ' qmt is ?sel ktx >ksaldo kxt ; \ saldo textgruppe    : >KBLATT (kb) i-msk cr kb ;  -->       \ kt.blatt-eingabe       ( saldieren, kontenbl€tter ( also also bh-menu definitions                                                                     : Privatkonten  ktx [titel] k-prv #100 bounds DO                 -1 dpl ! i -konto ?kb sdrop IF i .kblatt cr ENDIF LOOP kxt ;                                                                   : Kontenbl€tter ktx [titel]                 \ alle konten         (kb) 0 ' noop ' kl ' #konten 1 lis-go kxt ;                                                                                   : USt-Abrechnung [titel] 10 5 1 uktn        \ mwst von rund 1,00  5. 0 uktn 2rot 4drop d+ >rr dabs r 0> 100 \ vst genau, ust auf  * m+ 10 s* int 10 m/mod rot drop r d+- cr 0.   \ rund 0,10      r> -dup IF 0< lit+ 44 .msg ENDIF [ latest ] literal [t] rsum ;                                                                : USt-Summen bh (kb) [titel] 5. 43 u-sing 10 5 42 u-sing ;                              -->      previous previous         -->                                                                  ( journalliste sortieren, einzelposten)  bh definitions                                   \ alle posten: ( blk1 blk2 -- sgn(1-2): Datum: over 4+ @ over 4+ @ - -dup IF -rot 2drop ;s ENDIF        2@ swap rot 2@ swap 2swap d- 2sgn dup 0= + ;  \ datum         : Text: txt-p dup d+                            \ text            txt-l -trailing rot txt-l -trailing 2swap t= ;                h] >r 0. sp@ r> (fbtr) dabs h;  dup                             : Betrag: h, rot h, 2swap d- 2sgn ;             \ betrag        : Ust: u/v-p + c@ swap u/v-p + c@ swap - ;      \ ust-code      h] sover + 0 >r rp@ swap (fkto)            ( b1 b2 disp - f              + 0 >r rp@ swap (fkto) r> r> - h;  dup                 : Kto: kto-p h, ;                               \ konto         : Gkt: gkt-p h, ;                    -->        \ gegenkonto                                                                    \ : Datum: swap 4+ 0 rot 2- dup 6+                \ datum       \   DO drop 2- dup 2+ @ i @ - dup -leave -2 +LOOP sdrop ;       ( journalliste sortieren, sortiervorbereitung & -aufruf )                                                                       : s-num (sc) is k-cell                  \ lfd. nummern eintragen  lin 0 DO i i m-kto !l LOOP (kc) is k-cell in>w ;                defer (sel)                           \ vergleichs-aufruf                                                                     : sel-c dup is eli                      \ vergleich & auswertung  jline -cmt rot jline -cmt rot 2dup and                          IF 2drop swap 2dup (sel) -dup 0=      \ vergleich, datum nie 0   IF datum: ELSE -rot 2drop ENDIF 0< ;S \ datum bei gleichheit   ENDIF 2sdrop > ;                      \ zeilennummer bei cmnt                                                 -->                                                                             : 1scr >rr IF c/scr dup r to-work flen  \ min. eine leere seite   2dup d0= IF 2drop ELSE rot m/ drop - c/scr ENDIF +              0 DO bl sbyte LOOP r close in>w ENDIF rdrop ;                 ( journalliste sortieren, sortiert schreiben )                                                                                  : o-fi                                  \ ptr -- chan ff | tf     3 new-chan dup 2swap rot open 0= -EXIT message ;              : c-lis 0 >r 7 <                        \ nn --(nach auswahlcode  IF sfi jur (jbk) jur jbk (jbk) and    \ screenfile bilden        IF rdrop sfi o-fi IF 0 ENDIF >rr     \ nur einmal zum drucker    IF r ch-id prt ch-id d= pon and IF rdrop 0 >r ENDIF ENDIF      ELSE sfi -print space -8 message ENDIF                         ENDIF (sc) is k-cell mon 0= lin 0                               DO i m-kto @l 2dup jline swap -dup 0= IF dup mon= ENDIF          IF swap jdsp swap 1 ' tag +! j                                   IF j to-work dup lin-l sstrg work ch-rnum in>w -dup \ schrei    IF cr message cr r> close 0 >r ENDIF ENDIF                     ENDIF 2drop ?esc -leave                                        LOOP drop (kc) is k-cell r> 1scr ;                    -->     ( journalliste sortieren, postenauswahl & sortieren )                                                                           : @b fadr @l ;   : !b fadr !l ;      \ blockfile-adressierung                                                                                              \ sortierposten ausw€hlen & sortieren: c-sel bell cr #74 mlin s-num c-key key bell bl or    ( -- nn    associative: {d {t  {b     {k   {g   {u   {o ;   dup            case: datum: text: betrag: kto: gkt: ust: datum: #0 ; -dup      IF 2+ dup nfa in-cons xstrip id. in-cons xstrip                  is (sel) ' sel-c is precedes                                    mem-fl 0> IF ' @b ' !b ELSE ' @l ' !l ENDIF is d! is d@         (sc) is k-cell 1 m-kto lin 1- sort-l                            (kc) is k-cell ' @l is d@ ' !l is d!                           ENDIF ;                                ( 0...6, 7 bei <enter>                                                         -->                                                                      ( journalliste )                                        ( 109                          \ dir-anzeige wenn name auf '_' endet   : File? w#0 2>r         \ ptr msg# -- ( filenamen editieren       BEGIN 2r -dup IF cr 4>col .msg ENDIF >rr f/n pad dup off        over 2dup r> !name bell ." File:" c-key                         in-cons xstrip edline in-cons xstrip                            2dup + 1- c@ {_ = sdrop WHILE 2- pdir REPEAT                    2- !name 4>col rdrop rdrop ;                                               previous previous definitions                      : Journalliste bh       \ liste schreiben, ggf. sortiert          1 is dis 0 is tag >jar [titel] cr                               sfi #75 p'dis file? p'dis c-sel dup 1 6 within?                 IF #75 mlin ' (sel) @ 2+ nfa id. cr ENDIF dup 6-                IF c-lis cr {- strich tag 4 .r #46 .msg .mon$ ;S ENDIF          ?p-off >r 'ndis c-lis cr sfi jur (jbk) -bup r> ?p-on ;  -->                                                                    ( vollst€ndige auswertung ) bh definitions decimal                                          bh-menu definitions                 ( mon bestimmt den dargestellten zeitraum, oder muœ z.b. 0 sein: Auswertung  bh                                                        fbuf?  IF t-tog ENDIF           ( ohne textauswahl              4>col p'dis 'ksaldo                                             kontenbl€tter   p-pge                                           saldenliste     cr cr                                           ust-summen      cr cr                                           ust-abrechnung  p-pge                                           privatkonten    p-pge   kxt ;                   -->                                                                                                                                     : 'ksaldo in-cons dup xstrip    \ salden ermitteln               48 .msg xstrip in>w >jar bh-menu 'ndis >ksaldo [ ' cmc off ] ;                                                                  ( buchungszeile eingeben ) bh definitions decimal       ( 110                                                                  : >BUCHUNG       lin >rr                 \ kontrollnummer         is pvl n-lin c-lin b-lin               \ vorg€ngerzeile         BEGIN f-lin BEGIN                      \ oder korrektur           o-dat >datum  i-dat                  \ datum eintragen          o-txt >text   i-txt r lin =/=        \ text oder               WHILE rdrop lin abs >r REPEAT         \ ? vorige "K"orrektur    r IF                                  \ ? zeile neu              o-btr >betrag r lin = IF i-btr       \ betrag & programmierg    o-s/h >s/h    i-s/h                  \ soll, haben, cashflow    o-u/v >u/v    i-u/v                  \ ust-codierung            o-kto >konto  i-kto                  \ konto                    o-gkt >gkonto i-gkt  ENDIF           \ gegenkonto oder "K"                                                        [ -->                                                                      ( buchungszeile eingeben                                ( 111                                                                   ]                                                                  r dup IF lin =/= ENDIF ENDIF        \ ? zeile per nummer      WHILE r abs dup is lin is pvl REPEAT  \ ? selbe zeile nochmal \  lin () is lin                         \ check demo-vers        rdrop syn 0<                          \ ? diese zeile drucken   IF p-prt p-on .n-lin cr p-dis p-on ENDIF                        nul-m s-lin                           \ zeile(n) eintragen      -1 is mon 'ndis fb                    \ buchung auswerten       bks dup 0> IF                         \ ggf. sicherungscopie     1- -dup 0= IF dup 64 #mlin jback in>w ENDIF                    ENDIF is bks ;                                        -->                                                                                                                                       lin () is lin                         \ check demo-vers        ( editor-anpassung ) also editor definitions decimal   ( 112                                                                    range: jb    #0  7 37 49 51 53 59 ;    \ eigene tab-bereiche    case:  jc #0 #7 37 49 51 53 59 64 ;    \ und positionen         if-nfound (tb)  defer (tb) ' jb cfa ' (tb) 2+ !                 if-nfound (tc)  defer (tc) ' jc cfa ' (tc) 2+ !                 if-nfound bt  : bt r# @ c/l mod dup (tb) (tc) swap - (m) .f ;  : [l] >rr ' noop is pcr (l) default-is pcr scr@ b/scr *           r> + wid pos sdrop - 5- 0< 0= IF dup 5 .r ENDIF drop pcr ;    : [p] scr@ lin b/scr /mod               \ list screen             swap 0> + < 0= IF p-prt p-on 0 l. p-off ;S ENDIF drop -1 ;        csp @ >r 0 !csp drop -find b# csp! 0= 0= r> csp !               bh lin-l rvoc c/l =  and      if-true 2 +continue           : b>r b/scr /mod scr @ - >scr bh lin-l rvoc * r# ! ;            : b# p" nach Zeile #"(s#) b>r ss off l >pad ; \ f‡r journalliste                                                        -->      ( buchen und editor-anpassung                           ( 113                                                                  : >ed bh 210 edi-key ' b# is (ecs)              \ c¾ zeilenweise  -24 edi-key ' 0= 0 edi-key over is (ecs) is (ecs) \ ohne close  9 edi-key ' bt is (ecs)   ' [p] is pl         \ journal-tabs    ' jb is (tb) ' jc is (tc) ' [l] is .l ;       \ zeile & nummer                                                                : ed> bh 210 edi-key ' l# is (ecs)              \ c¾ screens      -24 edi-key ' (cs) 0 edi-key over is (ecs) is (ecs) \ quitclos  9 edi-key ' c-t is (ecs)        default-is pl \ standard-tabs   default-is (tb) default-is (tc) default-is .l ;                                                                                >ed " >post" w-find                                             if-true 2drop ' >ed is >prae ' voc>> is >post                                                                          -->                                                                      ( buchen und editor-anpassung  )                        ( 114     only forth editor also qdos also bh also definitions also                                                                    : (buchen)                      \ programmschleife zum buchen     p-off syn 0< IF p-prt p-on p-start p-dis p-on ENDIF             BEGIN >ed l .f 'mlin noop >buchung sp! lin 0= UNTIL ;                                                                         : fl 1 screen dup new-chan >rr  \ ptr -- open & laden             to-chan rot c-open 0= -7 ?error [compile] bh                    1 load screen close cr r screen to-chan r> close ;                                                                            : sufx 2dup @ -dup             \ suffix dest srce -- ( endung     IF cmove -3 over +! swap +text ;S ENDIF fdrop ;                                                                       -->                                                                                                                                      ( buchen, vorspann ) editor bh-menu also bh also decimal                                                                                     #10 load   decimal            \ meldungstexte     : Files a-close empty-buffers w#0           \ files, kan€le       cr cr mf 0 -konto                         \ texte & konten      0= IF ktn 70 file? ktn fl voc>> ENDIF                           credit -konto is p>c debit -konto is p>d                        drk 69 file?                              \ drucker             jur 49 file? jur @ 0= IF bye ENDIF        \ journal             dr0 0 screen jur c-open 0= IF jur o-fi -7 ?error 1scr ENDIF     (screen) f/n jur !name                                          " jbk" jbk jur sufx " sfi" sfi jur sufx " mem" dat jbk sufx     jbk 63 file? mem-lk d1- d0<              \ reserve & speicher   IF free -4096 m+ k-len d< IF dat 50 file? ENDIF ENDIF ; -->                                                                                                                                    ( buchen                                                ( 117                                                                  : buchen in>w cr !csp                           \ standard        47 mlin c-key key 27 = -EXIT                  \ bleibt...       voc>>                                         \ oder buchen     screen is-open mem-lk d1- d0< or              \ screenfile      0= IF ?p-off !csp cls files csp! ?p-on ENDIF  \ oder eingabe    [ last @ pfa cfa ] literal                    \ erneut buchen   also hidden (quit) previous !                 \ bei fehlern     cls 'ndis (buchen) [ ' cmc off ] ;            \ weiterbuchen                                          -->                                                                                                                                                                                                                                                                                                                                                      ( buchhaltung )  bh also bh-menu definitions also       ( 118                                                                  : Journal bell forth in>w cls bot 4/ wid 4/ rvoc at               [ latest ] literal [t] sp! 0. !csp files cr buchen ;                                                                          : >KB                   \ kontenbl€tter m. maskierung lt eingabe  (kb) p> 68 p'dis .msg also editor p'dis y/n previous            0> IF kontenbl€tter ;S ENDIF                                    BEGIN voc>> i-msk cr kb cr p'dis kto-m c-key key 27 = UNTIL ;                                                                 : Copyright.hpr'93 cr cr 4>col                                  \  [ ' noop cfa ] literal ' () @ =/= IF 73 .msg ENDIF             [ latest ] literal [t] ; last @ pfa is y                                                                              -->     \ quartalcode:  I: 769   II: 1540   III: 2311   IV: 3082        \                $0301      $0603       $0907      $0b0a         ( buchhaltung )        only forth also editor also qdos                                also bh also definitions also decimal   : cmo ?p-off >r p> mtt 8+ .msg 76 .msg mon clrt (s#) -dup         IF is mon ELSE pad @ bl or [ $100 {y or ] literal over          = swap [ $100 {j or ] literal = or IF -1 is mon ENDIF ENDIF     4>col 'ksaldo r> ?p-on ;      \ monat/[J]ahr eingeben                                                                         : clc p'dis vval val-in \. ;    \ rechnen                       : cwr b> mtt lit+ 13 p'dis .msg \ text schreiben, bis leerstring  ENTER BEGIN pad -print ENTRY p'dis (s@) pad @ $011b < UNTIL ;                                                                 : cvl voc>> 4 p'dis m-cr eval p'dis cr [ ' cmc off ] ; \ 4th-ein: cby cr ' bye is error                                           screen is-ochan IF flush ENDIF mem-off bye [ smudge           : cem in-cons wmov 'ndis cls c-key ;               -->                                                                           ( buchhaltung )                                         ( 119                                                                  : ml in>w bh    \ -- nadr ncnt max# 1st# otos (menu display-parm  pxenq 620 > 0 swap csize fdrop    \ ggf. breite schrift         mtt 1- sp@ >r dup mtx + >rr 0 over 1+ msg@ -rot 2drop 2>r       DO i msg@ dup 2+ rp@ 4+ 2dup +! dup @ wid -                      0< 0= IF dup 2@ drop 1+ -rot 2! ELSE 2drop ENDIF               -1 +LOOP r> 0=/= r> + 2r> ;                                                                                                   defer his ' history is his ' 2drop cfa ' his 2+ ! #9 is mon                                                                     \ : (( [ dmo ] literal dmo =                                    \  IF dmo umin ;s ENDIF trap0s y #100 pause cby ;               \  ' (( cfa ' () 2+ ! #2 is mon  \ demo erzeugen: default-is ()   ' buchhaltung cfa also hidden (quit) ! previous \ auto-start                                                          -->      ( buchhaltung                                           ( 120                                                                  \ : bc $7079 $436f -kname dup                                   \  IF 0 -konto over - swap nfa lit+ $b 2@ [ ' 4>col nfa even 4-]\ literal 2@ rot xor or xor $dfdf and or 0= ENDIF -EXIT         \ c y in>w bell 500 inkey 27 = -EXIT -15 message cby ;          \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                                      h] dup mnu + 0 mtx 1- wraps is mnu h;    dup                    : mse ( 1/3 -- -1/1 ) 2- h, ;                                   : mee ( 2/4 -- -1/1 ) 3- 6* h, ;                                \ ^^^(alter name "msm" wurde aus den heapmemworten compiliert)  : dt. date$ 5 -8 d+ type {, emit space day$ type ;              : ky d1- BEGIN                          ( at-posn -- key   )      drop dup 0 at dt. key curdis ddup + UNTIL sdrop ;                                                                     -->      ( buchhaltung ) decimal                                 ( 121  : mn    also qdos also pif      \ --) {mnu} posten auswählen      ml 2>r pon >r p-off dup 1+ m-cr minus bot + >rr 2- 0 >rr at     clrln mcl dup strip paper clrbt cr dt. ."  : "                  lin . bs 32 .msg 62 .msg space .mon$ 66 .msg 777 io-time !      BEGIN 2r at c-key mtx 0                                          DO i  also fp pick previous  dup 2+ wid pos sdrop - -            2r = 3* + 0< 0= IF cr ELSE i IF ."   " ENDIF ENDIF              in-cons i mnu = 2>rr -xstrip type-l 2r> -xstrip                LOOP 2r> 2r 0= 2- - .msg 2>rr ky                                associative: 27 192 208 200 216 10 32 252 ;      also editor    dup case: ende mse mee mse mee 0= 0= ptr noop ;  previous      0= UNTIL -1 io-time ! w#0 0. strip paper    \ ^^^msm ->mee^^^^  2r> d2- at clrln clrbt                      previous previous   r> ?pset rdrop r> sp@ - 2/ ndrop ;                    -->     \ 0= UNTIL -1 io-time ! w#0 0. (( strip paper \ ^^^msm ->mee^^^^ ( buchhaltung                                           ( 122                                                                  : bp                                                              BEGIN sp! 0. !csp -1 is syn voc>> mn bh-menu                     mnu >rr case: journal        journalliste saldenliste \  0                    ust-abrechnung >kb          auswertung  \  3                    kontenplan     clc          cmo         \  6                    ded            jback        p-pge       \  9                    pcr            cwr          cvl         \ 12                    cem            cby          p-tog  ;    \ 15          r> 8 < IF cr cr ENDIF                                      AGAIN rvoc ;                                                                                                                                                                          -->                                                                                                                                      ( buchhaltung ) also hidden also bh-menu definitions ( 128                                                                     : Buchhaltung bhw sp! 0. !csp y lngbad                            " mt_tra" basic tra-0 atne in-cons >fount                       default-is ?sel quit>> >error< 40. his default-is his           [ last @ pfa dup ] literal [ cfa ] literal (quit) ! is error    also forth bot 4/ wid 4/ at [ latest ] literal [t] also bh      files printer p-tog voc>> 5 m-cr                                -1 is mon -1 is syn ' >sc dup is fbv is fba                     4>col 'ksaldo voc>> bp ;                                                                                                      \  also also qdos pif definitions vocabulary x x definitions    \  : x ' history is his quit>> quit ; previous previous           bh-menu ' buchhaltung forth definitions is buchhaltung ;s     \  files bc dmo (( drop printer p-tog voc>> 5 m-cr